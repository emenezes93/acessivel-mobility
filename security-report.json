[{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\AccessibilitySettings.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":38,"column":23,"nodeType":"MemberExpression","endLine":38,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2514,2517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2514,2517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3364,3367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3364,3367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React from 'react';\r\nimport { AccessibleButton } from \"@/components/AccessibleButton\";\r\nimport { useAccessibility } from \"@/contexts/AccessibilityContext\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\n\r\ninterface AccessibilitySettingsProps {\r\n  onBack: () => void;\r\n}\r\n\r\nexport const AccessibilitySettings: React.FC<AccessibilitySettingsProps> = ({ onBack }) => {\r\n  const { settings, updateSettings, speak } = useAccessibility();\r\n\r\n  const fontSizeOptions = [\r\n    { value: 'normal', label: 'Normal (16px)' },\r\n    { value: 'large', label: 'Grande (18px)' },\r\n    { value: 'extra-large', label: 'Extra Grande (24px)' },\r\n  ];\r\n\r\n  const contrastOptions = [\r\n    { value: 'normal', label: 'Contraste Normal' },\r\n    { value: 'high', label: 'Alto Contraste' },\r\n  ];\r\n\r\n  const handleFontSizeChange = (size: 'normal' | 'large' | 'extra-large') => {\r\n    updateSettings({ fontSize: size });\r\n    speak(`Tamanho da fonte alterado para ${fontSizeOptions.find(opt => opt.value === size)?.label}`);\r\n  };\r\n\r\n  const handleContrastChange = (contrast: 'normal' | 'high') => {\r\n    updateSettings({ contrast });\r\n    speak(`Contraste alterado para ${contrastOptions.find(opt => opt.value === contrast)?.label}`);\r\n  };\r\n\r\n  const handleToggleSetting = (setting: keyof typeof settings, label: string) => {\r\n    const newValue = !settings[setting];\r\n    updateSettings({ [setting]: newValue });\r\n    speak(`${label} ${newValue ? 'ativado' : 'desativado'}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center space-x-4 mb-6\">\r\n        <AccessibleButton\r\n          onClick={onBack}\r\n          variant=\"outline\"\r\n          ariaLabel=\"Voltar ao menu principal\"\r\n          className=\"h-12 w-12\"\r\n        >\r\n          ‚Üê\r\n        </AccessibleButton>\r\n        <h2 className=\"text-2xl font-bold\">Configura√ß√µes de Acessibilidade</h2>\r\n      </div>\r\n\r\n      <Card className=\"p-6\">\r\n        <h3 className=\"text-lg font-semibold mb-4\">Tamanho da Fonte</h3>\r\n        <div className=\"space-y-3\">\r\n          {fontSizeOptions.map((option) => (\r\n            <div key={option.value} className=\"flex items-center space-x-3\">\r\n              <input\r\n                type=\"radio\"\r\n                id={`font-${option.value}`}\r\n                name=\"fontSize\"\r\n                checked={settings.fontSize === option.value}\r\n                onChange={() => handleFontSizeChange(option.value as any)}\r\n                className=\"h-5 w-5\"\r\n              />\r\n              <Label\r\n                htmlFor={`font-${option.value}`}\r\n                className=\"text-lg cursor-pointer\"\r\n              >\r\n                {option.label}\r\n              </Label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n\r\n      <Card className=\"p-6\">\r\n        <h3 className=\"text-lg font-semibold mb-4\">Contraste</h3>\r\n        <div className=\"space-y-3\">\r\n          {contrastOptions.map((option) => (\r\n            <div key={option.value} className=\"flex items-center space-x-3\">\r\n              <input\r\n                type=\"radio\"\r\n                id={`contrast-${option.value}`}\r\n                name=\"contrast\"\r\n                checked={settings.contrast === option.value}\r\n                onChange={() => handleContrastChange(option.value as any)}\r\n                className=\"h-5 w-5\"\r\n              />\r\n              <Label\r\n                htmlFor={`contrast-${option.value}`}\r\n                className=\"text-lg cursor-pointer\"\r\n              >\r\n                {option.label}\r\n              </Label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n\r\n      <Card className=\"p-6\">\r\n        <h3 className=\"text-lg font-semibold mb-4\">Funcionalidades</h3>\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <Checkbox\r\n              id=\"voice-enabled\"\r\n              checked={settings.voiceEnabled}\r\n              onCheckedChange={() => handleToggleSetting('voiceEnabled', 'Comandos de voz')}\r\n              className=\"h-5 w-5\"\r\n            />\r\n            <Label htmlFor=\"voice-enabled\" className=\"text-lg cursor-pointer\">\r\n              üé§ Comandos de Voz\r\n            </Label>\r\n          </div>\r\n\r\n          <div className=\"flex items-center space-x-3\">\r\n            <Checkbox\r\n              id=\"haptic-enabled\"\r\n              checked={settings.hapticEnabled}\r\n              onCheckedChange={() => handleToggleSetting('hapticEnabled', 'Feedback t√°til')}\r\n              className=\"h-5 w-5\"\r\n            />\r\n            <Label htmlFor=\"haptic-enabled\" className=\"text-lg cursor-pointer\">\r\n              üì≥ Feedback T√°til (Vibra√ß√£o)\r\n            </Label>\r\n          </div>\r\n\r\n          <div className=\"flex items-center space-x-3\">\r\n            <Checkbox\r\n              id=\"reduced-motion\"\r\n              checked={settings.reducedMotion}\r\n              onCheckedChange={() => handleToggleSetting('reducedMotion', 'Movimento reduzido')}\r\n              className=\"h-5 w-5\"\r\n            />\r\n            <Label htmlFor=\"reduced-motion\" className=\"text-lg cursor-pointer\">\r\n              üé≠ Reduzir Anima√ß√µes\r\n            </Label>\r\n          </div>\r\n\r\n          <div className=\"flex items-center space-x-3\">\r\n            <Checkbox\r\n              id=\"screen-reader\"\r\n              checked={settings.screenReader}\r\n              onCheckedChange={() => handleToggleSetting('screenReader', 'Leitor de tela')}\r\n              className=\"h-5 w-5\"\r\n            />\r\n            <Label htmlFor=\"screen-reader\" className=\"text-lg cursor-pointer\">\r\n              üëÅÔ∏è Otimizado para Leitor de Tela\r\n            </Label>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n\r\n      <Card className=\"p-6\">\r\n        <h3 className=\"text-lg font-semibold mb-4\">Teste de Acessibilidade</h3>\r\n        <div className=\"space-y-3\">\r\n          <AccessibleButton\r\n            onClick={() => speak('Este √© um teste de s√≠ntese de voz. Se voc√™ consegue ouvir esta mensagem, o sistema est√° funcionando corretamente.')}\r\n            variant=\"outline\"\r\n            size=\"lg\"\r\n            ariaLabel=\"Testar s√≠ntese de voz\"\r\n            className=\"w-full\"\r\n          >\r\n            üîä Testar S√≠ntese de Voz\r\n          </AccessibleButton>\r\n\r\n          <AccessibleButton\r\n            onClick={() => {\r\n              if (navigator.vibrate) {\r\n                navigator.vibrate([200, 100, 200, 100, 200]);\r\n                speak('Teste de vibra√ß√£o executado');\r\n              } else {\r\n                speak('Vibra√ß√£o n√£o dispon√≠vel neste dispositivo');\r\n              }\r\n            }}\r\n            variant=\"outline\"\r\n            size=\"lg\"\r\n            ariaLabel=\"Testar vibra√ß√£o\"\r\n            className=\"w-full\"\r\n          >\r\n            üì≥ Testar Vibra√ß√£o\r\n          </AccessibleButton>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\AccessibleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\AccessibleLogin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\DriverActiveRide.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[423,426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[423,426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'onStatusChange'. Either include it or remove the dependency array. If 'onStatusChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [onStatusChange, progress, speak, vibrate]","fix":{"range":[2908,2934],"text":"[onStatusChange, progress, speak, vibrate]"}}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":158,"column":12,"nodeType":"MemberExpression","endLine":158,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { AccessibleButton } from \"@/components/AccessibleButton\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAccessibility } from \"@/contexts/AccessibilityContext\";\n\ninterface DriverActiveRideProps {\n  onBack: () => void;\n  onComplete: () => void;\n  ride?: any;\n  onStatusChange?: (status: string) => void;\n}\n\ninterface PassengerInfo {\n  id: string;\n  name: string;\n  rating: number;\n  phone: string;\n  accessibilityNeeds: string[];\n}\n\ninterface RideInfo {\n  id: string;\n  origin: string;\n  destination: string;\n  distance: string;\n  duration: string;\n  price: number;\n  status: 'picking-up' | 'in-progress' | 'arriving';\n  passenger: PassengerInfo;\n}\n\nexport const DriverActiveRide: React.FC<DriverActiveRideProps> = ({ \n  onBack, \n  onComplete,\n  ride,\n  onStatusChange\n}) => {\n  const { speak, vibrate } = useAccessibility();\n  const [rideInfo, setRideInfo] = useState<RideInfo>(ride || {\n    id: 'ride-123',\n    origin: 'Av. Paulista, 1000, S√£o Paulo',\n    destination: 'Shopping Ibirapuera, S√£o Paulo',\n    distance: '5,2 km',\n    duration: '18 min',\n    price: 24.50,\n    status: 'picking-up',\n    passenger: {\n      id: 'user-456',\n      name: 'Maria Silva',\n      rating: 4.9,\n      phone: '(11) 98765-4321',\n      accessibilityNeeds: ['wheelchair', 'hearing-impaired']\n    }\n  });\n\n  const [progress, setProgress] = useState(0);\n  const [estimatedArrival, setEstimatedArrival] = useState('8 min');\n\n  // Simula o progresso da corrida\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress(prevProgress => {\n        if (prevProgress >= 100) {\n          clearInterval(timer);\n          return 100;\n        }\n        return prevProgress + 1;\n      });\n\n      // Atualiza o status da corrida com base no progresso\n      if (progress === 33) {\n        setRideInfo(prev => ({ ...prev, status: 'in-progress' }));\n        if (onStatusChange) onStatusChange('em_andamento');\n        speak('Passageiro embarcado. Iniciando viagem.');\n        vibrate([200, 100, 200]);\n      } else if (progress === 90) {\n        setRideInfo(prev => ({ ...prev, status: 'arriving' }));\n        if (onStatusChange) onStatusChange('chegando');\n        speak('Chegando ao destino em breve.');\n        vibrate([200, 100, 200]);\n      }\n\n      // Atualiza o tempo estimado de chegada\n      if (progress < 33) {\n        const remainingMinutes = Math.max(1, Math.floor((33 - progress) / 33 * 8));\n        setEstimatedArrival(`${remainingMinutes} min`);\n      } else if (progress < 90) {\n        const remainingMinutes = Math.max(1, Math.floor((90 - progress) / 57 * 18));\n        setEstimatedArrival(`${remainingMinutes} min`);\n      } else {\n        setEstimatedArrival('1 min');\n      }\n    }, 500);\n\n    return () => clearInterval(timer);\n  }, [progress, speak, vibrate]);\n\n  const handleCallPassenger = () => {\n    speak(`Ligando para ${rideInfo.passenger.name}`);\n    vibrate([100, 50, 100]);\n    // Simula√ß√£o de chamada telef√¥nica\n    alert(`Simulando liga√ß√£o para ${rideInfo.passenger.name}: ${rideInfo.passenger.phone}`);\n  };\n\n  const handleMessagePassenger = () => {\n    speak(`Enviando mensagem para ${rideInfo.passenger.name}`);\n    vibrate([100, 50, 100]);\n    // Simula√ß√£o de envio de mensagem\n    alert(`Simulando envio de mensagem para ${rideInfo.passenger.name}`);\n  };\n\n  const handleNavigate = () => {\n    speak(`Iniciando navega√ß√£o para ${rideInfo.status === 'picking-up' ? 'local de embarque' : 'destino'}`);\n    vibrate([100, 50, 100]);\n    // Simula√ß√£o de navega√ß√£o\n    alert(`Simulando navega√ß√£o para ${rideInfo.status === 'picking-up' ? rideInfo.origin : rideInfo.destination}`);\n  };\n\n  const handleCompleteRide = () => {\n    speak('Corrida finalizada com sucesso');\n    vibrate([300, 100, 300, 100, 300]);\n    onComplete();\n  };\n\n  const getStatusText = () => {\n    switch (rideInfo.status) {\n      case 'picking-up':\n        return 'A caminho do passageiro';\n      case 'in-progress':\n        return 'Em viagem';\n      case 'arriving':\n        return 'Chegando ao destino';\n      default:\n        return '';\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return value.toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    });\n  };\n\n  const getAccessibilityNeedsLabel = (need: string) => {\n    const needsMap: Record<string, string> = {\n      'wheelchair': 'Cadeira de rodas',\n      'hearing-impaired': 'Defici√™ncia auditiva',\n      'vision-impaired': 'Defici√™ncia visual',\n      'elderly': 'Idoso',\n      'pregnant': 'Gestante',\n      'cognitive': 'Defici√™ncia cognitiva',\n      'mobility-aid': 'Aux√≠lio de mobilidade'\n    };\n    \n    return needsMap[need] || need;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Corrida Ativa</h2>\n          <p className=\"text-muted-foreground\">{getStatusText()}</p>\n        </div>\n        <AccessibleButton\n          onClick={onBack}\n          variant=\"ghost\"\n          size=\"sm\"\n          ariaLabel=\"Voltar ao menu principal\"\n        >\n          Minimizar\n        </AccessibleButton>\n      </div>\n\n      <Card className=\"p-6 space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Tempo estimado</p>\n            <p className=\"text-xl font-bold\">{estimatedArrival}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Valor</p>\n            <p className=\"text-xl font-bold\">{formatCurrency(rideInfo.price)}</p>\n          </div>\n        </div>\n\n        <div className=\"space-y-1\">\n          <p className=\"text-sm text-muted-foreground\">Progresso</p>\n          <Progress value={progress} className=\"h-2\" />\n        </div>\n\n        <div className=\"space-y-2 pt-2\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"mt-1 min-w-4\">\n              <div className=\"w-4 h-4 rounded-full bg-green-500 flex items-center justify-center\">\n                <span className=\"text-white text-xs\">A</span>\n              </div>\n            </div>\n            <div>\n              <p className=\"font-medium\">Origem</p>\n              <p className=\"text-sm\">{rideInfo.origin}</p>\n            </div>\n          </div>\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"mt-1 min-w-4\">\n              <div className=\"w-4 h-4 rounded-full bg-red-500 flex items-center justify-center\">\n                <span className=\"text-white text-xs\">B</span>\n              </div>\n            </div>\n            <div>\n              <p className=\"font-medium\">Destino</p>\n              <p className=\"text-sm\">{rideInfo.destination}</p>\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-6 space-y-4\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center text-xl\">\n            üë§\n          </div>\n          <div>\n            <div className=\"flex items-center space-x-2\">\n              <h3 className=\"font-bold\">{rideInfo.passenger.name}</h3>\n              <div className=\"flex items-center\">\n                <span className=\"text-sm mr-1\">‚≠ê</span>\n                <span className=\"text-sm\">{rideInfo.passenger.rating}</span>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">{rideInfo.passenger.phone}</p>\n          </div>\n        </div>\n\n        <div>\n          <p className=\"text-sm font-medium mb-2\">Necessidades de acessibilidade:</p>\n          <div className=\"flex flex-wrap gap-2\">\n            {rideInfo.passenger.accessibilityNeeds.map((need) => (\n              <Badge key={need} variant=\"outline\" className=\"bg-primary/10\">\n                {getAccessibilityNeedsLabel(need)}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-2\">\n          <AccessibleButton\n            onClick={handleCallPassenger}\n            variant=\"outline\"\n            className=\"flex flex-col items-center justify-center py-2\"\n            ariaLabel=\"Ligar para o passageiro\"\n          >\n            <span className=\"text-xl mb-1\">üìû</span>\n            <span className=\"text-sm\">Ligar</span>\n          </AccessibleButton>\n          <AccessibleButton\n            onClick={handleMessagePassenger}\n            variant=\"outline\"\n            className=\"flex flex-col items-center justify-center py-2\"\n            ariaLabel=\"Enviar mensagem para o passageiro\"\n          >\n            <span className=\"text-xl mb-1\">üí¨</span>\n            <span className=\"text-sm\">Mensagem</span>\n          </AccessibleButton>\n          <AccessibleButton\n            onClick={handleNavigate}\n            variant=\"outline\"\n            className=\"flex flex-col items-center justify-center py-2\"\n            ariaLabel=\"Iniciar navega√ß√£o\"\n          >\n            <span className=\"text-xl mb-1\">üß≠</span>\n            <span className=\"text-sm\">Navegar</span>\n          </AccessibleButton>\n        </div>\n      </Card>\n\n      {rideInfo.status === 'arriving' && (\n        <AccessibleButton\n          onClick={handleCompleteRide}\n          variant=\"primary\"\n          className=\"w-full py-4 text-lg\"\n          ariaLabel=\"Finalizar corrida\"\n        >\n          Finalizar Corrida\n        </AccessibleButton>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\DriverCommunication.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\DriverDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1097,1100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1097,1100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2030,2033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2030,2033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":229,"column":12,"nodeType":"MemberExpression","endLine":229,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":241,"column":12,"nodeType":"MemberExpression","endLine":241,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { AccessibleButton } from \"@/components/AccessibleButton\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { useUser } from \"@/contexts/UserContext\";\r\nimport { useAccessibility } from \"@/contexts/AccessibilityContext\";\r\nimport { DriverRideList } from \"@/components/DriverRideList\";\r\nimport { DriverProfile } from \"@/components/DriverProfile\";\r\nimport { DriverEarnings } from \"@/components/DriverEarnings\";\r\nimport { DriverSettings } from \"@/components/DriverSettings\";\r\nimport { DriverActiveRide } from \"@/components/DriverActiveRide\";\r\n\r\ninterface DriverDashboardProps {\r\n  onLogout: () => void;\r\n}\r\n\r\ntype DriverDashboardView = 'home' | 'available-rides' | 'active-ride' | 'profile' | 'earnings' | 'settings';\r\n\r\nexport const DriverDashboard: React.FC<DriverDashboardProps> = ({ onLogout }) => {\r\n  const [currentView, setCurrentView] = useState<DriverDashboardView>('home');\r\n  const [isAvailable, setIsAvailable] = useState(true);\r\n  const [activeRide, setActiveRide] = useState<any>(null);\r\n  const { user } = useUser();\r\n  const { speak, vibrate, settings } = useAccessibility();\r\n\r\n  useEffect(() => {\r\n    // Verificar se h√° uma corrida ativa ao carregar\r\n    const savedActiveRide = localStorage.getItem('activeRide');\r\n    if (savedActiveRide) {\r\n      setActiveRide(JSON.parse(savedActiveRide));\r\n      setCurrentView('active-ride');\r\n    }\r\n  }, []);\r\n\r\n  const navigateToView = (view: DriverDashboardView, announcement?: string) => {\r\n    setCurrentView(view);\r\n    if (announcement) {\r\n      speak(announcement);\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('user');\r\n    speak('Logout realizado com sucesso');\r\n    onLogout();\r\n  };\r\n\r\n  const toggleAvailability = () => {\r\n    setIsAvailable(!isAvailable);\r\n    speak(isAvailable ? 'Voc√™ est√° offline' : 'Voc√™ est√° online e dispon√≠vel para corridas');\r\n    vibrate([100, 50, 100]);\r\n  };\r\n\r\n  const acceptRide = (ride: any) => {\r\n    setActiveRide(ride);\r\n    localStorage.setItem('activeRide', JSON.stringify(ride));\r\n    setCurrentView('active-ride');\r\n    speak('Corrida aceita. Navegando para detalhes da corrida.');\r\n    vibrate([200, 100, 200]);\r\n  };\r\n\r\n  const completeRide = () => {\r\n    speak('Corrida finalizada com sucesso');\r\n    vibrate([300, 100, 300]);\r\n    localStorage.removeItem('activeRide');\r\n    setActiveRide(null);\r\n    setCurrentView('home');\r\n  };\r\n\r\n  const renderView = () => {\r\n    switch (currentView) {\r\n      case 'available-rides':\r\n        return <DriverRideList onBack={() => navigateToView('home', 'Voltando ao menu principal')} onAcceptRide={acceptRide} />;\r\n      case 'active-ride':\r\n        return activeRide ? (\r\n          <DriverActiveRide \r\n            ride={activeRide} \r\n            onComplete={completeRide} \r\n            onBack={() => navigateToView('home', 'Voltando ao menu principal')} \r\n            onStatusChange={(status) => {\r\n              activeRide.status = status;\r\n              localStorage.setItem('activeRide', JSON.stringify(activeRide));\r\n              setActiveRide({...activeRide});\r\n            }}\r\n          />\r\n        ) : (\r\n          <div className=\"text-center p-6\">\r\n            <p className=\"text-lg\">Nenhuma corrida ativa no momento.</p>\r\n            <AccessibleButton\r\n              onClick={() => navigateToView('home', 'Voltando ao menu principal')}\r\n              variant=\"primary\"\r\n              className=\"mt-4\"\r\n            >\r\n              Voltar ao Menu\r\n            </AccessibleButton>\r\n          </div>\r\n        );\r\n      case 'profile':\r\n        return <DriverProfile onBack={() => navigateToView('home', 'Voltando ao menu principal')} />;\r\n      case 'earnings':\r\n        return <DriverEarnings onBack={() => navigateToView('home', 'Voltando ao menu principal')} />;\r\n      case 'settings':\r\n        return <DriverSettings onBack={() => navigateToView('home', 'Voltando ao menu principal')} onLogout={handleLogout} />;\r\n      default:\r\n        return (\r\n          <div className=\"space-y-6\">\r\n            <Card className=\"p-6\">\r\n              <div className=\"text-center space-y-4\">\r\n                <div className=\"text-4xl\" role=\"img\" aria-label=\"Bem-vindo\">\r\n                  üëã\r\n                </div>\r\n                <h2 className=\"text-2xl font-bold\">\r\n                  Ol√°, {user?.name}!\r\n                </h2>\r\n                <div className=\"mt-4\">\r\n                  <AccessibleButton\r\n                    onClick={toggleAvailability}\r\n                    variant={isAvailable ? 'primary' : 'secondary'}\r\n                    size=\"lg\"\r\n                    ariaLabel={isAvailable ? 'Voc√™ est√° online' : 'Voc√™ est√° offline'}\r\n                    className=\"w-full h-14 text-lg\"\r\n                  >\r\n                    <div className=\"flex items-center justify-center space-x-2\">\r\n                      <div className={`w-3 h-3 rounded-full ${isAvailable ? 'bg-green-500' : 'bg-red-500'}`}></div>\r\n                      <span>{isAvailable ? 'Online' : 'Offline'}</span>\r\n                    </div>\r\n                  </AccessibleButton>\r\n                </div>\r\n              </div>\r\n            </Card>\r\n\r\n            <div className=\"grid grid-cols-1 gap-4\">\r\n              <AccessibleButton\r\n                onClick={() => navigateToView('available-rides', 'Verificando corridas dispon√≠veis')}\r\n                variant=\"primary\"\r\n                size=\"lg\"\r\n                ariaLabel=\"Ver corridas dispon√≠veis\"\r\n                className=\"h-20 text-lg\"\r\n                disabled={!isAvailable}\r\n              >\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <span className=\"text-2xl\">üöï</span>\r\n                  <span>Corridas Dispon√≠veis</span>\r\n                </div>\r\n              </AccessibleButton>\r\n\r\n              {activeRide && (\r\n                <AccessibleButton\r\n                  onClick={() => navigateToView('active-ride', 'Abrindo detalhes da corrida ativa')}\r\n                  variant=\"primary\"\r\n                  size=\"lg\"\r\n                  ariaLabel=\"Ver corrida ativa\"\r\n                  className=\"h-20 text-lg\"\r\n                >\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <span className=\"text-2xl\">üöó</span>\r\n                    <span>Corrida Ativa</span>\r\n                  </div>\r\n                </AccessibleButton>\r\n              )}\r\n\r\n              <AccessibleButton\r\n                onClick={() => navigateToView('earnings', 'Abrindo ganhos')}\r\n                variant=\"outline\"\r\n                size=\"lg\"\r\n                ariaLabel=\"Ver ganhos\"\r\n                className=\"h-20 text-lg\"\r\n              >\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <span className=\"text-2xl\">üí∞</span>\r\n                  <span>Ganhos</span>\r\n                </div>\r\n              </AccessibleButton>\r\n\r\n              <AccessibleButton\r\n                onClick={() => navigateToView('profile', 'Abrindo perfil')}\r\n                variant=\"outline\"\r\n                size=\"lg\"\r\n                ariaLabel=\"Ver perfil\"\r\n                className=\"h-20 text-lg\"\r\n              >\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <span className=\"text-2xl\">üë§</span>\r\n                  <span>Perfil</span>\r\n                </div>\r\n              </AccessibleButton>\r\n              \r\n              <AccessibleButton\r\n                onClick={() => navigateToView('settings', 'Abrindo configura√ß√µes')}\r\n                variant=\"outline\"\r\n                size=\"lg\"\r\n                ariaLabel=\"Ver configura√ß√µes\"\r\n                className=\"h-20 text-lg\"\r\n              >\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <span className=\"text-2xl\">‚öôÔ∏è</span>\r\n                  <span>Configura√ß√µes</span>\r\n                </div>\r\n              </AccessibleButton>\r\n\r\n              <AccessibleButton\r\n                onClick={handleLogout}\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                ariaLabel=\"Sair da conta\"\r\n                className=\"h-20 text-lg\"\r\n              >\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <span className=\"text-2xl\">üö™</span>\r\n                  <span>Sair</span>\r\n                </div>\r\n              </AccessibleButton>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  // Fun√ß√µes auxiliares para acessibilidade\r\n  const getAccessibilityIcon = (need: string) => {\r\n    const iconMap: { [key: string]: string } = {\r\n      'wheelchair': '‚ôø',\r\n      'guide-dog': 'ü¶Æ',\r\n      'hearing-assistance': 'ü¶ª',\r\n      'visual-assistance': 'üëÅÔ∏è',\r\n      'mobility-assistance': 'ü¶Ø'\r\n    };\r\n    \r\n    return iconMap[need] || 'üîß';\r\n  };\r\n\r\n  const getAccessibilityLabel = (need: string) => {\r\n    const labelMap: { [key: string]: string } = {\r\n      'wheelchair': 'Cadeira de rodas',\r\n      'guide-dog': 'C√£o guia',\r\n      'hearing-assistance': 'Assist√™ncia auditiva',\r\n      'visual-assistance': 'Assist√™ncia visual',\r\n      'mobility-assistance': 'Assist√™ncia para mobilidade'\r\n    };\r\n    \r\n    return labelMap[need] || need;\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 p-4\">\r\n      <div className=\"max-w-md mx-auto\">\r\n        <header className=\"mb-6 pt-20\">\r\n          <h1 className=\"text-3xl font-bold text-center text-primary\">\r\n            Mobilidade Acess√≠vel\r\n          </h1>\r\n          {isAvailable && (\r\n            <p className=\"text-center text-sm mt-2\">\r\n              <span className=\"inline-block w-2 h-2 rounded-full bg-green-500 mr-1\"></span>\r\n              Motorista Online\r\n            </p>\r\n          )}\r\n        </header>\r\n\r\n        <main>\r\n          {renderView()}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\DriverEarnings.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":79,"column":34,"nodeType":"MemberExpression","endLine":79,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { AccessibleButton } from \"@/components/AccessibleButton\";\nimport { Card } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAccessibility } from \"@/contexts/AccessibilityContext\";\n\ninterface DriverEarningsProps {\n  onBack: () => void;\n}\n\ninterface EarningPeriod {\n  id: string;\n  label: string;\n  total: number;\n  rides: number;\n  hours: number;\n  details: EarningDetail[];\n}\n\ninterface EarningDetail {\n  id: string;\n  date: string;\n  amount: number;\n  rides: number;\n  hours: number;\n}\n\nexport const DriverEarnings: React.FC<DriverEarningsProps> = ({ onBack }) => {\n  const { speak } = useAccessibility();\n  const [selectedPeriod, setSelectedPeriod] = useState<string>('week');\n\n  // Dados simulados de ganhos\n  const earningsData: Record<string, EarningPeriod> = {\n    day: {\n      id: 'day',\n      label: 'Hoje',\n      total: 120.50,\n      rides: 8,\n      hours: 6,\n      details: [\n        { id: '1', date: '08:00 - 10:00', amount: 45.00, rides: 3, hours: 2 },\n        { id: '2', date: '12:00 - 14:00', amount: 35.50, rides: 2, hours: 2 },\n        { id: '3', date: '16:00 - 18:00', amount: 40.00, rides: 3, hours: 2 }\n      ]\n    },\n    week: {\n      id: 'week',\n      label: 'Esta Semana',\n      total: 850.75,\n      rides: 42,\n      hours: 38,\n      details: [\n        { id: '1', date: 'Segunda-feira', amount: 145.25, rides: 9, hours: 7 },\n        { id: '2', date: 'Ter√ßa-feira', amount: 132.50, rides: 8, hours: 6 },\n        { id: '3', date: 'Quarta-feira', amount: 168.00, rides: 10, hours: 8 },\n        { id: '4', date: 'Quinta-feira', amount: 155.50, rides: 7, hours: 7 },\n        { id: '5', date: 'Sexta-feira', amount: 120.50, rides: 8, hours: 6 },\n        { id: '6', date: 'S√°bado', amount: 129.00, rides: 0, hours: 4 },\n        { id: '7', date: 'Domingo', amount: 0, rides: 0, hours: 0 }\n      ]\n    },\n    month: {\n      id: 'month',\n      label: 'Este M√™s',\n      total: 3250.25,\n      rides: 168,\n      hours: 160,\n      details: [\n        { id: '1', date: 'Semana 1', amount: 820.50, rides: 42, hours: 40 },\n        { id: '2', date: 'Semana 2', amount: 780.25, rides: 38, hours: 38 },\n        { id: '3', date: 'Semana 3', amount: 850.75, rides: 42, hours: 38 },\n        { id: '4', date: 'Semana 4', amount: 798.75, rides: 46, hours: 44 }\n      ]\n    }\n  };\n\n  const handlePeriodChange = (value: string) => {\n    setSelectedPeriod(value);\n    speak(`Mostrando ganhos de ${earningsData[value].label}`);\n  };\n\n  const formatCurrency = (value: number) => {\n    return value.toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-2xl font-bold\">Meus Ganhos</h2>\n        <AccessibleButton\n          onClick={onBack}\n          variant=\"ghost\"\n          size=\"sm\"\n          ariaLabel=\"Voltar ao menu principal\"\n        >\n          Voltar\n        </AccessibleButton>\n      </div>\n\n      <Tabs defaultValue=\"week\" onValueChange={handlePeriodChange}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"day\" aria-label=\"Ver ganhos de hoje\">\n            Hoje\n          </TabsTrigger>\n          <TabsTrigger value=\"week\" aria-label=\"Ver ganhos desta semana\">\n            Semana\n          </TabsTrigger>\n          <TabsTrigger value=\"month\" aria-label=\"Ver ganhos deste m√™s\">\n            M√™s\n          </TabsTrigger>\n        </TabsList>\n\n        {Object.values(earningsData).map((period) => (\n          <TabsContent key={period.id} value={period.id} className=\"space-y-4\">\n            <Card className=\"p-6\">\n              <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-muted-foreground text-sm\">Total</p>\n                  <p className=\"text-2xl font-bold\">{formatCurrency(period.total)}</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-muted-foreground text-sm\">Corridas</p>\n                  <p className=\"text-2xl font-bold\">{period.rides}</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-muted-foreground text-sm\">Horas</p>\n                  <p className=\"text-2xl font-bold\">{period.hours}h</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Detalhamento</h3>\n                <div className=\"space-y-2\">\n                  {period.details.map((detail) => (\n                    <div key={detail.id} className=\"flex justify-between items-center p-3 border rounded-md hover:bg-accent/50\">\n                      <div>\n                        <p className=\"font-medium\">{detail.date}</p>\n                        <p className=\"text-sm text-muted-foreground\">{detail.rides} corridas ‚Ä¢ {detail.hours}h</p>\n                      </div>\n                      <p className=\"font-bold\">{formatCurrency(detail.amount)}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Estat√≠sticas</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">M√©dia por corrida</p>\n                  <p className=\"text-xl font-bold\">\n                    {formatCurrency(period.rides > 0 ? period.total / period.rides : 0)}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">M√©dia por hora</p>\n                  <p className=\"text-xl font-bold\">\n                    {formatCurrency(period.hours > 0 ? period.total / period.hours : 0)}\n                  </p>\n                </div>\n              </div>\n            </Card>\n          </TabsContent>\n        ))}\n      </Tabs>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\DriverProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\DriverRideList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[356,359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[356,359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":102,"column":12,"nodeType":"MemberExpression","endLine":102,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":114,"column":12,"nodeType":"MemberExpression","endLine":114,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { AccessibleButton } from \"@/components/AccessibleButton\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAccessibility } from \"@/contexts/AccessibilityContext\";\n\ninterface DriverRideListProps {\n  onBack: () => void;\n  onAcceptRide: (ride: any) => void;\n}\n\ninterface RideRequest {\n  id: string;\n  passengerName: string;\n  passengerPhone: string;\n  passengerRating: number;\n  origin: string;\n  destination: string;\n  estimatedPrice: number;\n  estimatedDistance: string;\n  estimatedDuration: string;\n  accessibilityNeeds: string[];\n  status: 'pendente' | 'a_caminho' | 'em_andamento' | 'concluida' | 'cancelada';\n}\n\nexport const DriverRideList: React.FC<DriverRideListProps> = ({ onBack, onAcceptRide }) => {\n  const [availableRides, setAvailableRides] = useState<RideRequest[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { speak, vibrate } = useAccessibility();\n\n  useEffect(() => {\n    // Simular carregamento de corridas dispon√≠veis\n    setIsLoading(true);\n    setTimeout(() => {\n      const mockRides: RideRequest[] = [\n        {\n          id: '1',\n          passengerName: 'Maria Silva',\n          passengerPhone: '11999998888',\n          passengerRating: 4.8,\n          origin: 'Av. Paulista, 1000',\n          destination: 'Shopping Ibirapuera',\n          estimatedPrice: 35.50,\n          estimatedDistance: '7.2 km',\n          estimatedDuration: '25 min',\n          accessibilityNeeds: ['wheelchair'],\n          status: 'pendente'\n        },\n        {\n          id: '2',\n          passengerName: 'Jo√£o Oliveira',\n          passengerPhone: '11988887777',\n          passengerRating: 4.5,\n          origin: 'Rua Augusta, 500',\n          destination: 'Hospital das Cl√≠nicas',\n          estimatedPrice: 28.75,\n          estimatedDistance: '5.5 km',\n          estimatedDuration: '18 min',\n          accessibilityNeeds: ['visual-assistance', 'guide-dog'],\n          status: 'pendente'\n        },\n        {\n          id: '3',\n          passengerName: 'Ana Souza',\n          passengerPhone: '11977776666',\n          passengerRating: 4.9,\n          origin: 'Esta√ß√£o S√© do Metr√¥',\n          destination: 'Parque Ibirapuera',\n          estimatedPrice: 42.30,\n          estimatedDistance: '8.7 km',\n          estimatedDuration: '30 min',\n          accessibilityNeeds: ['mobility-assistance'],\n          status: 'pendente'\n        }\n      ];\n      \n      setAvailableRides(mockRides);\n      setIsLoading(false);\n      speak(`${mockRides.length} corridas dispon√≠veis`);\n    }, 1500);\n  }, [speak]);\n\n  const handleAcceptRide = (ride: RideRequest) => {\n    vibrate([200, 100, 200]);\n    speak(`Aceitando corrida para ${ride.passengerName}`);\n    \n    // Atualizar status da corrida\n    const updatedRide = {...ride, status: 'a_caminho' as const};\n    onAcceptRide(updatedRide);\n  };\n\n  // Fun√ß√µes auxiliares para acessibilidade\n  const getAccessibilityIcon = (need: string) => {\n    const iconMap: { [key: string]: string } = {\n      'wheelchair': '‚ôø',\n      'guide-dog': 'ü¶Æ',\n      'hearing-assistance': 'ü¶ª',\n      'visual-assistance': 'üëÅÔ∏è',\n      'mobility-assistance': 'ü¶Ø'\n    };\n    \n    return iconMap[need] || 'üîß';\n  };\n\n  const getAccessibilityLabel = (need: string) => {\n    const labelMap: { [key: string]: string } = {\n      'wheelchair': 'Cadeira de rodas',\n      'guide-dog': 'C√£o guia',\n      'hearing-assistance': 'Assist√™ncia auditiva',\n      'visual-assistance': 'Assist√™ncia visual',\n      'mobility-assistance': 'Assist√™ncia para mobilidade'\n    };\n    \n    return labelMap[need] || need;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-2xl font-bold\">Corridas Dispon√≠veis</h2>\n        <AccessibleButton\n          onClick={onBack}\n          variant=\"ghost\"\n          size=\"sm\"\n          ariaLabel=\"Voltar ao menu principal\"\n        >\n          Voltar\n        </AccessibleButton>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-lg\" aria-live=\"polite\">Buscando corridas dispon√≠veis...</p>\n        </div>\n      ) : availableRides.length === 0 ? (\n        <Card className=\"p-6 text-center\">\n          <p className=\"text-lg mb-4\">Nenhuma corrida dispon√≠vel no momento.</p>\n          <AccessibleButton\n            onClick={onBack}\n            variant=\"primary\"\n            ariaLabel=\"Voltar ao menu principal\"\n          >\n            Voltar ao Menu\n          </AccessibleButton>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {availableRides.map(ride => (\n            <Card key={ride.id} className=\"p-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold\">{ride.passengerName}</h3>\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <span className=\"mr-1\">‚≠ê</span>\n                      <span>{ride.passengerRating.toFixed(1)}</span>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-lg font-bold\">R$ {ride.estimatedPrice.toFixed(2)}</p>\n                    <p className=\"text-sm text-muted-foreground\">{ride.estimatedDistance}</p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-1\">\n                  <p className=\"text-sm\"><strong>Origem:</strong> {ride.origin}</p>\n                  <p className=\"text-sm\"><strong>Destino:</strong> {ride.destination}</p>\n                  <p className=\"text-sm\"><strong>Dura√ß√£o estimada:</strong> {ride.estimatedDuration}</p>\n                </div>\n                \n                {ride.accessibilityNeeds.length > 0 && (\n                  <div>\n                    <p className=\"text-sm font-semibold mb-1\">Necessidades de Acessibilidade:</p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {ride.accessibilityNeeds.map(need => (\n                        <Badge key={need} variant=\"outline\" className=\"text-xs py-0.5\">\n                          {getAccessibilityIcon(need)} {getAccessibilityLabel(need)}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                \n                <AccessibleButton\n                  onClick={() => handleAcceptRide(ride)}\n                  variant=\"primary\"\n                  size=\"sm\"\n                  className=\"w-full mt-2\"\n                  ariaLabel={`Aceitar corrida para ${ride.passengerName}`}\n                >\n                  Aceitar Corrida\n                </AccessibleButton>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\DriverSettings.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":76,"column":12,"nodeType":"MemberExpression","endLine":76,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { AccessibleButton } from \"@/components/AccessibleButton\";\nimport { Card } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useAccessibility } from \"@/contexts/AccessibilityContext\";\nimport { useUser } from \"@/contexts/UserContext\";\n\ninterface DriverSettingsProps {\n  onBack: () => void;\n  onLogout: () => void;\n}\n\nexport const DriverSettings: React.FC<DriverSettingsProps> = ({ onBack, onLogout }) => {\n  const { speak, vibrate, settings, updateSettings } = useAccessibility();\n  const { user } = useUser();\n  \n  const [notifications, setNotifications] = useState(true);\n  const [sounds, setSounds] = useState(true);\n  const [hapticFeedback, setHapticFeedback] = useState(true);\n  const [autoAccept, setAutoAccept] = useState(false);\n  const [maxDistance, setMaxDistance] = useState(10); // km\n  const [workHours, setWorkHours] = useState<string[]>(['morning', 'afternoon']);\n  \n  const handleNotificationsChange = (checked: boolean) => {\n    setNotifications(checked);\n    speak(checked ? 'Notifica√ß√µes ativadas' : 'Notifica√ß√µes desativadas');\n    vibrate([100, 50, 100]);\n  };\n  \n  const handleSoundsChange = (checked: boolean) => {\n    setSounds(checked);\n    speak(checked ? 'Sons ativados' : 'Sons desativados');\n    vibrate([100, 50, 100]);\n  };\n  \n  const handleHapticChange = (checked: boolean) => {\n    setHapticFeedback(checked);\n    speak(checked ? 'Feedback t√°til ativado' : 'Feedback t√°til desativado');\n    vibrate([100, 50, 100]);\n  };\n  \n  const handleAutoAcceptChange = (checked: boolean) => {\n    setAutoAccept(checked);\n    speak(checked ? 'Aceita√ß√£o autom√°tica ativada' : 'Aceita√ß√£o autom√°tica desativada');\n    vibrate([100, 50, 100]);\n  };\n  \n  const handleMaxDistanceChange = (value: number[]) => {\n    setMaxDistance(value[0]);\n    speak(`Dist√¢ncia m√°xima definida para ${value[0]} quil√¥metros`);\n  };\n  \n  const handleWorkHourToggle = (period: string) => {\n    setWorkHours(prev => {\n      if (prev.includes(period)) {\n        const newHours = prev.filter(h => h !== period);\n        speak(`Per√≠odo ${getWorkHourLabel(period)} removido`);\n        return newHours;\n      } else {\n        speak(`Per√≠odo ${getWorkHourLabel(period)} adicionado`);\n        return [...prev, period];\n      }\n    });\n    vibrate([100, 50, 100]);\n  };\n  \n  const getWorkHourLabel = (period: string) => {\n    const labels: Record<string, string> = {\n      'morning': 'manh√£',\n      'afternoon': 'tarde',\n      'evening': 'noite',\n      'night': 'madrugada'\n    };\n    return labels[period] || period;\n  };\n  \n  const handleLogout = () => {\n    speak('Saindo da conta');\n    vibrate([300, 100, 300]);\n    onLogout();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-2xl font-bold\">Configura√ß√µes</h2>\n        <AccessibleButton\n          onClick={onBack}\n          variant=\"ghost\"\n          size=\"sm\"\n          ariaLabel=\"Voltar ao menu principal\"\n        >\n          Voltar\n        </AccessibleButton>\n      </div>\n\n      <Card className=\"p-6 space-y-6\">\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Notifica√ß√µes e Feedback</h3>\n          \n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"notifications\" className=\"flex-1\">\n              Notifica√ß√µes push\n            </Label>\n            <Switch\n              id=\"notifications\"\n              checked={notifications}\n              onCheckedChange={handleNotificationsChange}\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"sounds\" className=\"flex-1\">\n              Sons\n            </Label>\n            <Switch\n              id=\"sounds\"\n              checked={sounds}\n              onCheckedChange={handleSoundsChange}\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"haptic\" className=\"flex-1\">\n              Feedback t√°til\n            </Label>\n            <Switch\n              id=\"haptic\"\n              checked={hapticFeedback}\n              onCheckedChange={handleHapticChange}\n            />\n          </div>\n        </div>\n        \n        <div className=\"space-y-4 pt-4 border-t\">\n          <h3 className=\"text-lg font-semibold\">Prefer√™ncias de Corridas</h3>\n          \n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"auto-accept\" className=\"flex-1\">\n              Aceitar corridas automaticamente\n            </Label>\n            <Switch\n              id=\"auto-accept\"\n              checked={autoAccept}\n              onCheckedChange={handleAutoAcceptChange}\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <Label htmlFor=\"max-distance\">Dist√¢ncia m√°xima para corridas</Label>\n              <span>{maxDistance} km</span>\n            </div>\n            <Slider\n              id=\"max-distance\"\n              min={1}\n              max={30}\n              step={1}\n              value={[maxDistance]}\n              onValueChange={handleMaxDistanceChange}\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label>Hor√°rios de trabalho</Label>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {['morning', 'afternoon', 'evening', 'night'].map((period) => (\n                <AccessibleButton\n                  key={period}\n                  variant={workHours.includes(period) ? 'default' : 'outline'}\n                  onClick={() => handleWorkHourToggle(period)}\n                  ariaLabel={`${workHours.includes(period) ? 'Remover' : 'Adicionar'} per√≠odo da ${getWorkHourLabel(period)}`}\n                  className=\"justify-start\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-3 h-3 rounded-full ${workHours.includes(period) ? 'bg-white' : 'bg-primary/30'}`}></div>\n                    <span>{getWorkHourLabel(period)}</span>\n                  </div>\n                </AccessibleButton>\n              ))}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"space-y-4 pt-4 border-t\">\n          <h3 className=\"text-lg font-semibold\">Acessibilidade</h3>\n          \n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"high-contrast\" className=\"flex-1\">\n              Alto contraste\n            </Label>\n            <Switch\n              id=\"high-contrast\"\n              checked={settings?.highContrast || false}\n              onCheckedChange={(checked) => {\n                updateSettings({ highContrast: checked });\n                speak(checked ? 'Alto contraste ativado' : 'Alto contraste desativado');\n              }}\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"large-text\" className=\"flex-1\">\n              Texto grande\n            </Label>\n            <Switch\n              id=\"large-text\"\n              checked={settings?.largeText || false}\n              onCheckedChange={(checked) => {\n                updateSettings({ largeText: checked });\n                speak(checked ? 'Texto grande ativado' : 'Texto grande desativado');\n              }}\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"reduced-motion\" className=\"flex-1\">\n              Reduzir movimento\n            </Label>\n            <Switch\n              id=\"reduced-motion\"\n              checked={settings?.reducedMotion || false}\n              onCheckedChange={(checked) => {\n                updateSettings({ reducedMotion: checked });\n                speak(checked ? 'Movimento reduzido ativado' : 'Movimento reduzido desativado');\n              }}\n            />\n          </div>\n        </div>\n      </Card>\n\n      <AccessibleButton\n        onClick={handleLogout}\n        variant=\"destructive\"\n        className=\"w-full py-4\"\n        ariaLabel=\"Sair da conta\"\n      >\n        Sair da Conta\n      </AccessibleButton>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\EmergencyButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\PaymentMethodSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\RideHistory.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":78,"column":36,"nodeType":"MemberExpression","endLine":78,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState } from 'react';\r\nimport { AccessibleButton } from \"@/components/AccessibleButton\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { useAccessibility } from \"@/contexts/AccessibilityContext\";\r\n\r\ninterface RideHistoryProps {\r\n  onBack: () => void;\r\n}\r\n\r\ninterface RideRecord {\r\n  id: string;\r\n  date: string;\r\n  origin: string;\r\n  destination: string;\r\n  driver: string;\r\n  price: number;\r\n  status: 'completed' | 'cancelled';\r\n  rating?: number;\r\n  accessibilityUsed: string[];\r\n}\r\n\r\nexport const RideHistory: React.FC<RideHistoryProps> = ({ onBack }) => {\r\n  const [rides] = useState<RideRecord[]>([\r\n    {\r\n      id: '1',\r\n      date: '2024-06-28',\r\n      origin: 'Shopping Center Norte',\r\n      destination: 'Hospital das Cl√≠nicas',\r\n      driver: 'Jo√£o Silva',\r\n      price: 25.50,\r\n      status: 'completed',\r\n      rating: 4.5,\r\n      accessibilityUsed: ['wheelchair', 'visual-assistance']\r\n    },\r\n    {\r\n      id: '2',\r\n      date: '2024-06-25',\r\n      origin: 'Rua das Flores, 123',\r\n      destination: 'Metr√¥ Vila Madalena',\r\n      driver: 'Maria Santos',\r\n      price: 18.00,\r\n      status: 'completed',\r\n      rating: 5,\r\n      accessibilityUsed: ['hearing-assistance']\r\n    },\r\n    {\r\n      id: '3',\r\n      date: '2024-06-20',\r\n      origin: 'Casa',\r\n      destination: 'Consulta m√©dica',\r\n      driver: 'Pedro Oliveira',\r\n      price: 32.00,\r\n      status: 'cancelled',\r\n      accessibilityUsed: ['guide-dog']\r\n    }\r\n  ]);\r\n\r\n  const [showRatingModal, setShowRatingModal] = useState<string | null>(null);\r\n  const [selectedRating, setSelectedRating] = useState(0);\r\n  const { speak } = useAccessibility();\r\n\r\n  const handleRate = (rideId: string, rating: number) => {\r\n    speak(`Avalia√ß√£o de ${rating} estrelas enviada`);\r\n    setShowRatingModal(null);\r\n    setSelectedRating(0);\r\n  };\r\n\r\n  const getAccessibilityIcons = (features: string[]) => {\r\n    const iconMap: { [key: string]: string } = {\r\n      'wheelchair': '‚ôø',\r\n      'guide-dog': 'ü¶Æ',\r\n      'hearing-assistance': 'ü¶ª',\r\n      'visual-assistance': 'üëÅÔ∏è',\r\n      'mobility-assistance': 'ü¶Ø'\r\n    };\r\n    \r\n    return features.map(feature => iconMap[feature] || 'üîß').join(' ');\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('pt-BR', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center space-x-4 mb-6\">\r\n        <AccessibleButton\r\n          onClick={onBack}\r\n          variant=\"outline\"\r\n          ariaLabel=\"Voltar ao menu principal\"\r\n          className=\"h-12 w-12\"\r\n        >\r\n          ‚Üê\r\n        </AccessibleButton>\r\n        <h2 className=\"text-2xl font-bold\">Hist√≥rico de Corridas</h2>\r\n      </div>\r\n\r\n      <div className=\"space-y-4\">\r\n        {rides.map((ride) => (\r\n          <Card key={ride.id} className=\"p-4\">\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex justify-between items-start\">\r\n                <div className=\"flex-1\">\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    {formatDate(ride.date)}\r\n                  </p>\r\n                  <div className=\"space-y-2 mt-2\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className=\"text-green-600\">üìç</span>\r\n                      <span className=\"text-sm\">{ride.origin}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className=\"text-red-600\">üéØ</span>\r\n                      <span className=\"text-sm\">{ride.destination}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"text-right\">\r\n                  <p className=\"font-bold text-lg\">R$ {ride.price.toFixed(2)}</p>\r\n                  <p className={`text-sm px-2 py-1 rounded ${\r\n                    ride.status === 'completed' \r\n                      ? 'bg-green-100 text-green-800' \r\n                      : 'bg-red-100 text-red-800'\r\n                  }`}>\r\n                    {ride.status === 'completed' ? 'Conclu√≠da' : 'Cancelada'}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"border-t pt-3 space-y-2\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-sm text-muted-foreground\">Motorista</p>\r\n                    <p className=\"font-medium\">{ride.driver}</p>\r\n                  </div>\r\n                  \r\n                  {ride.rating && (\r\n                    <div className=\"flex items-center space-x-1\">\r\n                      <span>‚≠ê</span>\r\n                      <span className=\"font-medium\">{ride.rating}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {ride.accessibilityUsed.length > 0 && (\r\n                  <div>\r\n                    <p className=\"text-sm text-muted-foreground\">Acessibilidade</p>\r\n                    <p className=\"text-lg\">{getAccessibilityIcons(ride.accessibilityUsed)}</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {ride.status === 'completed' && !ride.rating && (\r\n                <AccessibleButton\r\n                  onClick={() => setShowRatingModal(ride.id)}\r\n                  variant=\"outline\"\r\n                  ariaLabel={`Avaliar corrida com ${ride.driver}`}\r\n                  className=\"w-full mt-3\"\r\n                >\r\n                  ‚≠ê Avaliar Corrida\r\n                </AccessibleButton>\r\n              )}\r\n            </div>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Modal de Avalia√ß√£o */}\r\n      {showRatingModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n          <Card className=\"w-full max-w-sm p-6\">\r\n            <h3 className=\"text-xl font-bold text-center mb-4\">\r\n              Avaliar Corrida\r\n            </h3>\r\n            \r\n            <div className=\"flex justify-center space-x-2 mb-6\">\r\n              {[1, 2, 3, 4, 5].map((star) => (\r\n                <AccessibleButton\r\n                  key={star}\r\n                  onClick={() => {\r\n                    setSelectedRating(star);\r\n                    speak(`${star} estrelas selecionadas`);\r\n                  }}\r\n                  variant=\"ghost\"\r\n                  ariaLabel={`${star} estrelas`}\r\n                  className={`text-3xl ${\r\n                    star <= selectedRating ? 'text-yellow-500' : 'text-gray-300'\r\n                  }`}\r\n                >\r\n                  ‚≠ê\r\n                </AccessibleButton>\r\n              ))}\r\n            </div>\r\n            \r\n            <div className=\"flex space-x-3\">\r\n              <AccessibleButton\r\n                onClick={() => handleRate(showRatingModal, selectedRating)}\r\n                disabled={selectedRating === 0}\r\n                variant=\"primary\"\r\n                ariaLabel=\"Confirmar avalia√ß√£o\"\r\n                className=\"flex-1\"\r\n              >\r\n                Confirmar\r\n              </AccessibleButton>\r\n              \r\n              <AccessibleButton\r\n                onClick={() => {\r\n                  setShowRatingModal(null);\r\n                  setSelectedRating(0);\r\n                }}\r\n                variant=\"outline\"\r\n                ariaLabel=\"Cancelar avalia√ß√£o\"\r\n                className=\"flex-1\"\r\n              >\r\n                Cancelar\r\n              </AccessibleButton>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {rides.length === 0 && (\r\n        <Card className=\"p-8 text-center\">\r\n          <div className=\"text-6xl mb-4\">üìã</div>\r\n          <h3 className=\"text-xl font-bold mb-2\">Nenhuma corrida ainda</h3>\r\n          <p className=\"text-muted-foreground\">\r\n            Suas corridas aparecer√£o aqui ap√≥s serem realizadas\r\n          </p>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\RideRequestForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1695,1698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1695,1698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1815,1818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1815,1818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'getCurrentLocation'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [getCurrentLocation]","fix":{"range":[2372,2374],"text":"[getCurrentLocation]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateEstimate'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":78,"suggestions":[{"desc":"Update the dependencies array to be: [origin.address, destination.address, accessibilityNeeds, paymentMethod, calculateEstimate]","fix":{"range":[2491,2563],"text":"[origin.address, destination.address, accessibilityNeeds, paymentMethod, calculateEstimate]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":197,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7055,7058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7055,7058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { AccessibleButton } from \"@/components/AccessibleButton\";\r\nimport { VoiceInterface } from \"@/components/VoiceInterface\";\r\nimport { RideScheduler } from \"@/components/RideScheduler\";\r\nimport { DriverCommunication } from \"@/components/DriverCommunication\";\r\nimport { PaymentMethodSelector } from \"@/components/PaymentMethodSelector\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { useAccessibility } from \"@/contexts/AccessibilityContext\";\r\nimport { useUser } from \"@/contexts/UserContext\";\r\n\r\ninterface RideRequestFormProps {\r\n  onBack: () => void;\r\n}\r\n\r\ninterface Location {\r\n  address: string;\r\n  lat?: number;\r\n  lng?: number;\r\n}\r\n\r\nexport const RideRequestForm: React.FC<RideRequestFormProps> = ({ onBack }) => {\r\n  const [origin, setOrigin] = useState<Location>({ address: '' });\r\n  const [destination, setDestination] = useState<Location>({ address: '' });\r\n  const [accessibilityNeeds, setAccessibilityNeeds] = useState<string[]>([]);\r\n  const [paymentMethod, setPaymentMethod] = useState<string>('credit-card');\r\n  const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);\r\n  const [isLoadingPrice, setIsLoadingPrice] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [currentLocation, setCurrentLocation] = useState<Location | null>(null);\r\n  const [showScheduler, setShowScheduler] = useState(false);\r\n  const [isScheduled, setIsScheduled] = useState(false);\r\n  const [scheduleData, setScheduleData] = useState<any>(null);\r\n  const [rideAccepted, setRideAccepted] = useState(false);\r\n  const [driverInfo, setDriverInfo] = useState<any>(null);\r\n  \r\n  const { speak, vibrate } = useAccessibility();\r\n  const { user } = useUser();\r\n\r\n  const accessibilityOptions = [\r\n    { id: 'wheelchair', label: 'Cadeira de rodas', icon: '‚ôø' },\r\n    { id: 'guide-dog', label: 'C√£o guia', icon: 'ü¶Æ' },\r\n    { id: 'hearing-assistance', label: 'Assist√™ncia auditiva', icon: 'ü¶ª' },\r\n    { id: 'visual-assistance', label: 'Assist√™ncia visual', icon: 'üëÅÔ∏è' },\r\n    { id: 'mobility-assistance', label: 'Assist√™ncia para mobilidade', icon: 'ü¶Ø' },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getCurrentLocation();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (origin.address && destination.address) {\r\n      calculateEstimate();\r\n    }\r\n  }, [origin.address, destination.address, accessibilityNeeds, paymentMethod]);\r\n\r\n  const getCurrentLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const location = {\r\n            address: 'Localiza√ß√£o atual',\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude\r\n          };\r\n          setCurrentLocation(location);\r\n          speak('Localiza√ß√£o atual obtida');\r\n        },\r\n        (error) => {\r\n          console.error('Error getting location:', error);\r\n          speak('N√£o foi poss√≠vel obter a localiza√ß√£o atual');\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const useCurrentLocation = () => {\r\n    if (currentLocation) {\r\n      setOrigin(currentLocation);\r\n      speak('Localiza√ß√£o atual definida como origem');\r\n      vibrate(200);\r\n    }\r\n  };\r\n\r\n  const calculateEstimate = async () => {\r\n    setIsLoadingPrice(true);\r\n    \r\n    // Simulate API call for price estimation\r\n    setTimeout(() => {\r\n      const basePrice = 12.50;\r\n      const accessibilityFee = accessibilityNeeds.length * 2.00;\r\n      const paymentMethodFee = paymentMethod === 'bitcoin' ? 1.50 : 0;\r\n      const estimated = basePrice + accessibilityFee + paymentMethodFee;\r\n      \r\n      setEstimatedPrice(estimated);\r\n      setIsLoadingPrice(false);\r\n      speak(`Valor estimado: ${estimated.toFixed(2)} reais`);\r\n    }, 1500);\r\n  };\r\n\r\n  const handleVoiceCommand = (command: string) => {\r\n    const lowerCommand = command.toLowerCase();\r\n    \r\n    if (lowerCommand.includes('origem') || lowerCommand.includes('sa√≠da')) {\r\n      setOrigin({ address: command });\r\n      speak('Origem definida por voz');\r\n    } else if (lowerCommand.includes('destino') || lowerCommand.includes('indo')) {\r\n      setDestination({ address: command });\r\n      speak('Destino definido por voz');\r\n    } else if (lowerCommand.includes('agendar')) {\r\n      setShowScheduler(true);\r\n      speak('Abrindo agendamento de corrida');\r\n    } else if (lowerCommand.includes('cart√£o') || lowerCommand.includes('credito')) {\r\n      setPaymentMethod('credit-card');\r\n      speak('M√©todo de pagamento alterado para cart√£o');\r\n    } else if (lowerCommand.includes('pix')) {\r\n      setPaymentMethod('pix');\r\n      speak('M√©todo de pagamento alterado para PIX');\r\n    } else if (lowerCommand.includes('bitcoin')) {\r\n      setPaymentMethod('bitcoin');\r\n      speak('M√©todo de pagamento alterado para Bitcoin');\r\n    } else if (lowerCommand.includes('confirmar') || lowerCommand.includes('solicitar')) {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  const toggleAccessibilityNeed = (needId: string) => {\r\n    setAccessibilityNeeds(prev => {\r\n      const newNeeds = prev.includes(needId)\r\n        ? prev.filter(id => id !== needId)\r\n        : [...prev, needId];\r\n      \r\n      const option = accessibilityOptions.find(opt => opt.id === needId);\r\n      if (option) {\r\n        speak(prev.includes(needId) ? \r\n          `${option.label} removido` : \r\n          `${option.label} adicionado`\r\n        );\r\n      }\r\n      \r\n      return newNeeds;\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!origin.address || !destination.address) {\r\n      speak('Por favor, preencha origem e destino');\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    \r\n    if (isScheduled) {\r\n      speak('Agendamento confirmado! Voc√™ receber√° uma confirma√ß√£o pr√≥ximo ao hor√°rio.');\r\n    } else {\r\n      speak(`Solicitando corrida com pagamento via ${getPaymentMethodName(paymentMethod)}...`);\r\n    }\r\n    \r\n    // Simulate API call\r\n    setTimeout(() => {\r\n      if (isScheduled) {\r\n        speak('Corrida agendada com sucesso!');\r\n        vibrate([300, 100, 300]);\r\n        setIsSubmitting(false);\r\n        onBack();\r\n      } else {\r\n        // Simulate finding driver\r\n        const mockDriver = {\r\n          name: 'Jo√£o Silva',\r\n          phone: '+55 11 99999-9999',\r\n          vehicle: 'Honda Civic Branco',\r\n          plate: 'ABC-1234',\r\n          rating: 4.8\r\n        };\r\n        \r\n        setDriverInfo(mockDriver);\r\n        setRideAccepted(true);\r\n        speak('Corrida aceita! Motorista a caminho.');\r\n        vibrate([300, 100, 300]);\r\n        setIsSubmitting(false);\r\n      }\r\n    }, 2000);\r\n  };\r\n\r\n  const getPaymentMethodName = (method: string) => {\r\n    switch (method) {\r\n      case 'credit-card': return 'cart√£o de cr√©dito/d√©bito';\r\n      case 'pix': return 'PIX';\r\n      case 'bitcoin': return 'Bitcoin';\r\n      default: return 'cart√£o de cr√©dito/d√©bito';\r\n    }\r\n  };\r\n\r\n  const handleSchedule = (data: any) => {\r\n    setScheduleData(data);\r\n    setIsScheduled(true);\r\n    setShowScheduler(false);\r\n    speak(`Corrida agendada para ${data.date} √†s ${data.time}`);\r\n  };\r\n\r\n  const handleDriverCall = () => {\r\n    if (driverInfo) {\r\n      window.open(`tel:${driverInfo.phone}`);\r\n    }\r\n  };\r\n\r\n  const handleDriverMessage = () => {\r\n    speak('Funcionalidade de chat em desenvolvimento');\r\n  };\r\n\r\n  const handleLocateDriver = () => {\r\n    speak('Localizando motorista no mapa');\r\n  };\r\n\r\n  if (rideAccepted && driverInfo) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex items-center space-x-4 mb-6\">\r\n          <AccessibleButton\r\n            onClick={onBack}\r\n            variant=\"outline\"\r\n            ariaLabel=\"Voltar ao menu principal\"\r\n            className=\"h-12 w-12\"\r\n          >\r\n            ‚Üê\r\n          </AccessibleButton>\r\n          <h2 className=\"text-2xl font-bold\">Corrida Aceita</h2>\r\n        </div>\r\n\r\n        <div className=\"text-center space-y-4\">\r\n          <div className=\"text-6xl\">üöó</div>\r\n          <h3 className=\"text-xl font-bold text-green-600\">Motorista a caminho!</h3>\r\n          <p className=\"text-lg\">Tempo estimado: 8 minutos</p>\r\n        </div>\r\n\r\n        <DriverCommunication\r\n          driverInfo={driverInfo}\r\n          onCall={handleDriverCall}\r\n          onMessage={handleDriverMessage}\r\n          onLocateDriver={handleLocateDriver}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (showScheduler) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex items-center space-x-4 mb-6\">\r\n          <AccessibleButton\r\n            onClick={() => setShowScheduler(false)}\r\n            variant=\"outline\"\r\n            ariaLabel=\"Voltar ao formul√°rio\"\r\n            className=\"h-12 w-12\"\r\n          >\r\n            ‚Üê\r\n          </AccessibleButton>\r\n          <h2 className=\"text-2xl font-bold\">Agendar Corrida</h2>\r\n        </div>\r\n\r\n        <RideScheduler\r\n          onSchedule={handleSchedule}\r\n          onCancel={() => setShowScheduler(false)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center space-x-4 mb-6\">\r\n        <AccessibleButton\r\n          onClick={onBack}\r\n          variant=\"outline\"\r\n          ariaLabel=\"Voltar ao menu principal\"\r\n          className=\"h-12 w-12\"\r\n        >\r\n          ‚Üê\r\n        </AccessibleButton>\r\n        <h2 className=\"text-2xl font-bold\">\r\n          {isScheduled ? 'Corrida Agendada' : 'Solicitar Corrida'}\r\n        </h2>\r\n      </div>\r\n\r\n      <VoiceInterface\r\n        onCommand={handleVoiceCommand}\r\n        placeholder=\"Diga a origem, destino, m√©todo de pagamento ou 'agendar'\"\r\n      />\r\n\r\n      {isScheduled && scheduleData && (\r\n        <Card className=\"p-4 bg-blue-50 border-blue-200\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <span className=\"text-2xl\">üìÖ</span>\r\n            <div>\r\n              <p className=\"font-bold\">Corrida Agendada</p>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                {scheduleData.date} √†s {scheduleData.time}\r\n                {scheduleData.isRecurring && ' (Semanal)'}\r\n              </p>\r\n            </div>\r\n            <AccessibleButton\r\n              onClick={() => {\r\n                setIsScheduled(false);\r\n                setScheduleData(null);\r\n              }}\r\n              variant=\"outline\"\r\n              ariaLabel=\"Cancelar agendamento\"\r\n              className=\"ml-auto\"\r\n            >\r\n              Cancelar\r\n            </AccessibleButton>\r\n          </div>\r\n        </Card>\r\n      )}\r\n\r\n      <Card className=\"p-6 space-y-4\">\r\n        <div className=\"space-y-4\">\r\n          <div>\r\n            <Label htmlFor=\"origin\" className=\"text-lg font-medium\">\r\n              De onde voc√™ est√° saindo?\r\n            </Label>\r\n            <div className=\"flex space-x-2 mt-2\">\r\n              <Input\r\n                id=\"origin\"\r\n                value={origin.address}\r\n                onChange={(e) => setOrigin({ address: e.target.value })}\r\n                placeholder=\"Digite o endere√ßo de origem\"\r\n                className=\"h-12 text-lg flex-1\"\r\n              />\r\n              {currentLocation && (\r\n                <AccessibleButton\r\n                  onClick={useCurrentLocation}\r\n                  variant=\"outline\"\r\n                  ariaLabel=\"Usar localiza√ß√£o atual\"\r\n                  className=\"h-12 px-3\"\r\n                >\r\n                  üìç\r\n                </AccessibleButton>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"destination\" className=\"text-lg font-medium\">\r\n              Para onde voc√™ vai?\r\n            </Label>\r\n            <Input\r\n              id=\"destination\"\r\n              value={destination.address}\r\n              onChange={(e) => setDestination({ address: e.target.value })}\r\n              placeholder=\"Digite o endere√ßo de destino\"\r\n              className=\"h-12 text-lg mt-2\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Card>\r\n\r\n      <PaymentMethodSelector\r\n        selectedMethod={paymentMethod}\r\n        onMethodChange={setPaymentMethod}\r\n      />\r\n\r\n      <Card className=\"p-6\">\r\n        <h3 className=\"text-lg font-semibold mb-4\">\r\n          Necessidades de Acessibilidade\r\n        </h3>\r\n        <div className=\"space-y-3\">\r\n          {accessibilityOptions.map((option) => (\r\n            <div key={option.id} className=\"flex items-center space-x-3\">\r\n              <Checkbox\r\n                id={option.id}\r\n                checked={accessibilityNeeds.includes(option.id)}\r\n                onCheckedChange={() => toggleAccessibilityNeed(option.id)}\r\n                className=\"h-5 w-5\"\r\n              />\r\n              <Label\r\n                htmlFor={option.id}\r\n                className=\"flex items-center space-x-2 text-lg cursor-pointer\"\r\n              >\r\n                <span>{option.icon}</span>\r\n                <span>{option.label}</span>\r\n              </Label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n\r\n      {(origin.address && destination.address) && (\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-2\">Estimativa de Pre√ßo</h3>\r\n          {isLoadingPrice ? (\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-primary\"></div>\r\n              <span>Calculando...</span>\r\n            </div>\r\n          ) : estimatedPrice ? (\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-green-600\">\r\n                R$ {estimatedPrice.toFixed(2)}\r\n              </div>\r\n              <p className=\"text-sm text-muted-foreground mt-1\">\r\n                Pagamento via {getPaymentMethodName(paymentMethod)}\r\n              </p>\r\n            </div>\r\n          ) : null}\r\n        </Card>\r\n      )}\r\n\r\n      <div className=\"flex space-x-3\">\r\n        <AccessibleButton\r\n          onClick={() => setShowScheduler(true)}\r\n          variant=\"outline\"\r\n          ariaLabel=\"Agendar corrida para mais tarde\"\r\n          className=\"flex-1 h-16 text-lg\"\r\n        >\r\n          <div className=\"flex items-center space-x-2\">\r\n            <span>üìÖ</span>\r\n            <span>Agendar</span>\r\n          </div>\r\n        </AccessibleButton>\r\n\r\n        <AccessibleButton\r\n          onClick={handleSubmit}\r\n          disabled={!origin.address || !destination.address || isSubmitting}\r\n          variant=\"primary\"\r\n          ariaLabel={isScheduled ? \"Confirmar agendamento\" : \"Confirmar solicita√ß√£o de corrida\"}\r\n          className=\"flex-1 h-16 text-lg\"\r\n        >\r\n          {isSubmitting ? (\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\r\n              <span>{isScheduled ? 'Agendando...' : 'Solicitando...'}</span>\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex items-center space-x-2\">\r\n              <span>üöó</span>\r\n              <span>{isScheduled ? 'Confirmar Agendamento' : 'Confirmar Corrida'}</span>\r\n            </div>\r\n          )}\r\n        </AccessibleButton>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\RideScheduler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\VoiceInterface.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[724,727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[724,727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[910,913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[910,913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[947,950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[947,950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1472,1475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1472,1475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":49,"column":30,"nodeType":"MemberExpression","endLine":49,"endColumn":46},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":50,"column":15,"nodeType":"MemberExpression","endLine":50,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2279,2282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2279,2282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'startListening'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [autoStart, isSupported, settings.voiceEnabled, startListening]","fix":{"range":[2758,2805],"text":"[autoStart, isSupported, settings.voiceEnabled, startListening]"}}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { AccessibleButton } from \"@/components/AccessibleButton\";\r\nimport { useAccessibility } from \"@/contexts/AccessibilityContext\";\r\nimport { Mic, MicOff } from \"lucide-react\";\r\n\r\ninterface VoiceInterfaceProps {\r\n  onCommand?: (command: string) => void;\r\n  placeholder?: string;\r\n  autoStart?: boolean;\r\n}\r\n\r\nexport const VoiceInterface: React.FC<VoiceInterfaceProps> = ({\r\n  onCommand,\r\n  placeholder = \"Clique para falar\",\r\n  autoStart = false,\r\n}) => {\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [transcript, setTranscript] = useState('');\r\n  const [isSupported, setIsSupported] = useState(false);\r\n  const recognitionRef = useRef<any>(null);\r\n  \r\n  const { speak, vibrate, settings } = useAccessibility();\r\n\r\n  useEffect(() => {\r\n    // Check if Web Speech API is supported\r\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\r\n    \r\n    if (SpeechRecognition) {\r\n      setIsSupported(true);\r\n      recognitionRef.current = new SpeechRecognition();\r\n      \r\n      const recognition = recognitionRef.current;\r\n      recognition.continuous = false;\r\n      recognition.interimResults = true;\r\n      recognition.lang = 'pt-BR';\r\n      \r\n      recognition.onstart = () => {\r\n        setIsListening(true);\r\n        speak('Escutando...');\r\n        vibrate([100, 50, 100]);\r\n      };\r\n      \r\n      recognition.onresult = (event: any) => {\r\n        let finalTranscript = '';\r\n        let interimTranscript = '';\r\n        \r\n        for (let i = event.resultIndex; i < event.results.length; i++) {\r\n          const transcript = event.results[i][0].transcript;\r\n          if (event.results[i].isFinal) {\r\n            finalTranscript += transcript;\r\n          } else {\r\n            interimTranscript += transcript;\r\n          }\r\n        }\r\n        \r\n        setTranscript(finalTranscript || interimTranscript);\r\n        \r\n        if (finalTranscript && onCommand) {\r\n          onCommand(finalTranscript);\r\n        }\r\n      };\r\n      \r\n      recognition.onend = () => {\r\n        setIsListening(false);\r\n        if (transcript) {\r\n          speak(`Voc√™ disse: ${transcript}`);\r\n        }\r\n      };\r\n      \r\n      recognition.onerror = (event: any) => {\r\n        setIsListening(false);\r\n        console.error('Speech recognition error:', event.error);\r\n        speak('Erro no reconhecimento de voz. Tente novamente.');\r\n      };\r\n    }\r\n\r\n    return () => {\r\n      if (recognitionRef.current) {\r\n        recognitionRef.current.stop();\r\n      }\r\n    };\r\n  }, [onCommand, speak, vibrate, transcript]);\r\n\r\n  useEffect(() => {\r\n    if (autoStart && isSupported && settings.voiceEnabled) {\r\n      startListening();\r\n    }\r\n  }, [autoStart, isSupported, settings.voiceEnabled]);\r\n\r\n  const startListening = () => {\r\n    if (recognitionRef.current && !isListening) {\r\n      setTranscript('');\r\n      recognitionRef.current.start();\r\n    }\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognitionRef.current && isListening) {\r\n      recognitionRef.current.stop();\r\n    }\r\n  };\r\n\r\n  const toggleListening = () => {\r\n    if (isListening) {\r\n      stopListening();\r\n    } else {\r\n      startListening();\r\n    }\r\n  };\r\n\r\n  if (!isSupported) {\r\n    return (\r\n      <div className=\"text-center p-4 bg-muted rounded-lg\">\r\n        <p className=\"text-muted-foreground\">\r\n          Reconhecimento de voz n√£o dispon√≠vel neste navegador\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-center\">\r\n        <AccessibleButton\r\n          onClick={toggleListening}\r\n          variant={isListening ? \"destructive\" : \"outline\"}\r\n          size=\"lg\"\r\n          ariaLabel={isListening ? \"Parar grava√ß√£o de voz\" : \"Iniciar grava√ß√£o de voz\"}\r\n          voiceAnnouncement={isListening ? \"Parando grava√ß√£o\" : \"Iniciando grava√ß√£o de voz\"}\r\n          className=\"h-16 w-16 rounded-full\"\r\n        >\r\n          {isListening ? (\r\n            <MicOff className=\"h-8 w-8\" />\r\n          ) : (\r\n            <Mic className=\"h-8 w-8\" />\r\n          )}\r\n        </AccessibleButton>\r\n      </div>\r\n      \r\n      <div className=\"text-center\">\r\n        <p className=\"text-sm text-muted-foreground mb-2\">\r\n          {isListening ? 'Escutando...' : placeholder}\r\n        </p>\r\n        \r\n        {transcript && (\r\n          <div \r\n            className=\"bg-muted p-3 rounded-lg text-left\"\r\n            role=\"status\"\r\n            aria-live=\"polite\"\r\n          >\r\n            <p className=\"font-medium\">Voc√™ disse:</p>\r\n            <p className=\"text-lg mt-1\">{transcript}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {isListening && (\r\n        <div className=\"flex justify-center\">\r\n          <div className=\"flex space-x-1\">\r\n            <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\r\n            <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\r\n            <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface BadgeProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof badgeVariants> {}\r\n\r\nfunction Badge({ className, variant, ...props }: BadgeProps) {\r\n  return (\r\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\r\n  )\r\n}\r\n\r\nexport { Badge, badgeVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\chart.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":352,"column":7,"nodeType":"MemberExpression","endLine":352,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as RechartsPrimitive from \"recharts\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\n// Format: { THEME_NAME: CSS_SELECTOR }\r\nconst THEMES = { light: \"\", dark: \".dark\" } as const\r\n\r\nexport type ChartConfig = {\r\n  [k in string]: {\r\n    label?: React.ReactNode\r\n    icon?: React.ComponentType\r\n  } & (\r\n    | { color?: string; theme?: never }\r\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\r\n  )\r\n}\r\n\r\ntype ChartContextProps = {\r\n  config: ChartConfig\r\n}\r\n\r\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\r\n\r\nfunction useChart() {\r\n  const context = React.useContext(ChartContext)\r\n\r\n  if (!context) {\r\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nconst ChartContainer = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    config: ChartConfig\r\n    children: React.ComponentProps<\r\n      typeof RechartsPrimitive.ResponsiveContainer\r\n    >[\"children\"]\r\n  }\r\n>(({ id, className, children, config, ...props }, ref) => {\r\n  const uniqueId = React.useId()\r\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\r\n\r\n  return (\r\n    <ChartContext.Provider value={{ config }}>\r\n      <div\r\n        data-chart={chartId}\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        <ChartStyle id={chartId} config={config} />\r\n        <RechartsPrimitive.ResponsiveContainer>\r\n          {children}\r\n        </RechartsPrimitive.ResponsiveContainer>\r\n      </div>\r\n    </ChartContext.Provider>\r\n  )\r\n})\r\nChartContainer.displayName = \"Chart\"\r\n\r\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\r\n  const colorConfig = Object.entries(config).filter(\r\n    ([_, config]) => config.theme || config.color\r\n  )\r\n\r\n  if (!colorConfig.length) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <style\r\n      dangerouslySetInnerHTML={{\r\n        __html: Object.entries(THEMES)\r\n          .map(\r\n            ([theme, prefix]) => `\r\n${prefix} [data-chart=${id}] {\r\n${colorConfig\r\n  .map(([key, itemConfig]) => {\r\n    const color =\r\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\r\n      itemConfig.color\r\n    return color ? `  --color-${key}: ${color};` : null\r\n  })\r\n  .join(\"\\n\")}\r\n}\r\n`\r\n          )\r\n          .join(\"\\n\"),\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nconst ChartTooltip = RechartsPrimitive.Tooltip\r\n\r\nconst ChartTooltipContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\r\n    React.ComponentProps<\"div\"> & {\r\n      hideLabel?: boolean\r\n      hideIndicator?: boolean\r\n      indicator?: \"line\" | \"dot\" | \"dashed\"\r\n      nameKey?: string\r\n      labelKey?: string\r\n    }\r\n>(\r\n  (\r\n    {\r\n      active,\r\n      payload,\r\n      className,\r\n      indicator = \"dot\",\r\n      hideLabel = false,\r\n      hideIndicator = false,\r\n      label,\r\n      labelFormatter,\r\n      labelClassName,\r\n      formatter,\r\n      color,\r\n      nameKey,\r\n      labelKey,\r\n    },\r\n    ref\r\n  ) => {\r\n    const { config } = useChart()\r\n\r\n    const tooltipLabel = React.useMemo(() => {\r\n      if (hideLabel || !payload?.length) {\r\n        return null\r\n      }\r\n\r\n      const [item] = payload\r\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\r\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\r\n      const value =\r\n        !labelKey && typeof label === \"string\"\r\n          ? config[label as keyof typeof config]?.label || label\r\n          : itemConfig?.label\r\n\r\n      if (labelFormatter) {\r\n        return (\r\n          <div className={cn(\"font-medium\", labelClassName)}>\r\n            {labelFormatter(value, payload)}\r\n          </div>\r\n        )\r\n      }\r\n\r\n      if (!value) {\r\n        return null\r\n      }\r\n\r\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\r\n    }, [\r\n      label,\r\n      labelFormatter,\r\n      payload,\r\n      hideLabel,\r\n      labelClassName,\r\n      config,\r\n      labelKey,\r\n    ])\r\n\r\n    if (!active || !payload?.length) {\r\n      return null\r\n    }\r\n\r\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\r\n          className\r\n        )}\r\n      >\r\n        {!nestLabel ? tooltipLabel : null}\r\n        <div className=\"grid gap-1.5\">\r\n          {payload.map((item, index) => {\r\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\r\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\r\n            const indicatorColor = color || item.payload.fill || item.color\r\n\r\n            return (\r\n              <div\r\n                key={item.dataKey}\r\n                className={cn(\r\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\r\n                  indicator === \"dot\" && \"items-center\"\r\n                )}\r\n              >\r\n                {formatter && item?.value !== undefined && item.name ? (\r\n                  formatter(item.value, item.name, item, index, item.payload)\r\n                ) : (\r\n                  <>\r\n                    {itemConfig?.icon ? (\r\n                      <itemConfig.icon />\r\n                    ) : (\r\n                      !hideIndicator && (\r\n                        <div\r\n                          className={cn(\r\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\r\n                            {\r\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\r\n                              \"w-1\": indicator === \"line\",\r\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\r\n                                indicator === \"dashed\",\r\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\r\n                            }\r\n                          )}\r\n                          style={\r\n                            {\r\n                              \"--color-bg\": indicatorColor,\r\n                              \"--color-border\": indicatorColor,\r\n                            } as React.CSSProperties\r\n                          }\r\n                        />\r\n                      )\r\n                    )}\r\n                    <div\r\n                      className={cn(\r\n                        \"flex flex-1 justify-between leading-none\",\r\n                        nestLabel ? \"items-end\" : \"items-center\"\r\n                      )}\r\n                    >\r\n                      <div className=\"grid gap-1.5\">\r\n                        {nestLabel ? tooltipLabel : null}\r\n                        <span className=\"text-muted-foreground\">\r\n                          {itemConfig?.label || item.name}\r\n                        </span>\r\n                      </div>\r\n                      {item.value && (\r\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\r\n                          {item.value.toLocaleString()}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\nChartTooltipContent.displayName = \"ChartTooltip\"\r\n\r\nconst ChartLegend = RechartsPrimitive.Legend\r\n\r\nconst ChartLegendContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> &\r\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\r\n      hideIcon?: boolean\r\n      nameKey?: string\r\n    }\r\n>(\r\n  (\r\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\r\n    ref\r\n  ) => {\r\n    const { config } = useChart()\r\n\r\n    if (!payload?.length) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex items-center justify-center gap-4\",\r\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\r\n          className\r\n        )}\r\n      >\r\n        {payload.map((item) => {\r\n          const key = `${nameKey || item.dataKey || \"value\"}`\r\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\r\n\r\n          return (\r\n            <div\r\n              key={item.value}\r\n              className={cn(\r\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\r\n              )}\r\n            >\r\n              {itemConfig?.icon && !hideIcon ? (\r\n                <itemConfig.icon />\r\n              ) : (\r\n                <div\r\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\r\n                  style={{\r\n                    backgroundColor: item.color,\r\n                  }}\r\n                />\r\n              )}\r\n              {itemConfig?.label}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n)\r\nChartLegendContent.displayName = \"ChartLegend\"\r\n\r\n// Helper to extract item config from a payload.\r\nfunction getPayloadConfigFromPayload(\r\n  config: ChartConfig,\r\n  payload: unknown,\r\n  key: string\r\n) {\r\n  if (typeof payload !== \"object\" || payload === null) {\r\n    return undefined\r\n  }\r\n\r\n  const payloadPayload =\r\n    \"payload\" in payload &&\r\n    typeof payload.payload === \"object\" &&\r\n    payload.payload !== null\r\n      ? payload.payload\r\n      : undefined\r\n\r\n  let configLabelKey: string = key\r\n\r\n  if (\r\n    key in payload &&\r\n    typeof payload[key as keyof typeof payload] === \"string\"\r\n  ) {\r\n    configLabelKey = payload[key as keyof typeof payload] as string\r\n  } else if (\r\n    payloadPayload &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\r\n  ) {\r\n    configLabelKey = payloadPayload[\r\n      key as keyof typeof payloadPayload\r\n    ] as string\r\n  }\r\n\r\n  return configLabelKey in config\r\n    ? config[configLabelKey]\r\n    : config[key as keyof typeof config]\r\n}\r\n\r\nexport {\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n  ChartLegend,\r\n  ChartLegendContent,\r\n  ChartStyle,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[724,775],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\r\nimport { Command as CommandPrimitive } from \"cmdk\"\r\nimport { Search } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\r\n\r\nconst Command = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCommand.displayName = CommandPrimitive.displayName\r\n\r\ninterface CommandDialogProps extends DialogProps {}\r\n\r\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\r\n  return (\r\n    <Dialog {...props}>\r\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\r\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\r\n          {children}\r\n        </Command>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nconst CommandInput = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Input>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\r\n>(({ className, ...props }, ref) => (\r\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\r\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\r\n    <CommandPrimitive.Input\r\n      ref={ref}\r\n      className={cn(\r\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\n\r\nCommandInput.displayName = CommandPrimitive.Input.displayName\r\n\r\nconst CommandList = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.List\r\n    ref={ref}\r\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\r\n    {...props}\r\n  />\r\n))\r\n\r\nCommandList.displayName = CommandPrimitive.List.displayName\r\n\r\nconst CommandEmpty = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Empty>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\r\n>((props, ref) => (\r\n  <CommandPrimitive.Empty\r\n    ref={ref}\r\n    className=\"py-6 text-center text-sm\"\r\n    {...props}\r\n  />\r\n))\r\n\r\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\r\n\r\nconst CommandGroup = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Group>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Group\r\n    ref={ref}\r\n    className={cn(\r\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\n\r\nCommandGroup.displayName = CommandPrimitive.Group.displayName\r\n\r\nconst CommandSeparator = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Separator\r\n    ref={ref}\r\n    className={cn(\"-mx-1 h-px bg-border\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\r\n\r\nconst CommandItem = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\n\r\nCommandItem.displayName = CommandPrimitive.Item.displayName\r\n\r\nconst CommandShortcut = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLSpanElement>) => {\r\n  return (\r\n    <span\r\n      className={cn(\r\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\nCommandShortcut.displayName = \"CommandShortcut\"\r\n\r\nexport {\r\n  Command,\r\n  CommandDialog,\r\n  CommandInput,\r\n  CommandList,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandItem,\r\n  CommandShortcut,\r\n  CommandSeparator,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport {\r\n  Controller,\r\n  ControllerProps,\r\n  FieldPath,\r\n  FieldValues,\r\n  FormProvider,\r\n  useFormContext,\r\n} from \"react-hook-form\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Label } from \"@/components/ui/label\"\r\n\r\nconst Form = FormProvider\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n)\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  )\r\n}\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext)\r\n  const itemContext = React.useContext(FormItemContext)\r\n  const { getFieldState, formState } = useFormContext()\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState)\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\")\r\n  }\r\n\r\n  const { id } = itemContext\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  }\r\n}\r\n\r\ntype FormItemContextValue = {\r\n  id: string\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n)\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId()\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  )\r\n})\r\nFormItem.displayName = \"FormItem\"\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField()\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && \"text-destructive\", className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormLabel.displayName = \"FormLabel\"\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormControl.displayName = \"FormControl\"\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField()\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormDescription.displayName = \"FormDescription\"\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField()\r\n  const body = error ? String(error?.message) : children\r\n\r\n  if (!body) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn(\"text-sm font-medium text-destructive\", className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  )\r\n})\r\nFormMessage.displayName = \"FormMessage\"\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\input-otp.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":36,"column":44,"nodeType":"MemberExpression","endLine":36,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { OTPInput, OTPInputContext } from \"input-otp\"\r\nimport { Dot } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst InputOTP = React.forwardRef<\r\n  React.ElementRef<typeof OTPInput>,\r\n  React.ComponentPropsWithoutRef<typeof OTPInput>\r\n>(({ className, containerClassName, ...props }, ref) => (\r\n  <OTPInput\r\n    ref={ref}\r\n    containerClassName={cn(\r\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\r\n      containerClassName\r\n    )}\r\n    className={cn(\"disabled:cursor-not-allowed\", className)}\r\n    {...props}\r\n  />\r\n))\r\nInputOTP.displayName = \"InputOTP\"\r\n\r\nconst InputOTPGroup = React.forwardRef<\r\n  React.ElementRef<\"div\">,\r\n  React.ComponentPropsWithoutRef<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\r\n))\r\nInputOTPGroup.displayName = \"InputOTPGroup\"\r\n\r\nconst InputOTPSlot = React.forwardRef<\r\n  React.ElementRef<\"div\">,\r\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\r\n>(({ index, className, ...props }, ref) => {\r\n  const inputOTPContext = React.useContext(OTPInputContext)\r\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\r\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {char}\r\n      {hasFakeCaret && (\r\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\r\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n})\r\nInputOTPSlot.displayName = \"InputOTPSlot\"\r\n\r\nconst InputOTPSeparator = React.forwardRef<\r\n  React.ElementRef<\"div\">,\r\n  React.ComponentPropsWithoutRef<\"div\">\r\n>(({ ...props }, ref) => (\r\n  <div ref={ref} role=\"separator\" {...props}>\r\n    <Dot />\r\n  </div>\r\n))\r\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\r\n\r\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { ChevronDown } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst NavigationMenu = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <NavigationMenuViewport />\r\n  </NavigationMenuPrimitive.Root>\r\n))\r\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\r\n\r\nconst NavigationMenuList = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.List\r\n    ref={ref}\r\n    className={cn(\r\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\r\n\r\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\r\n\r\nconst navigationMenuTriggerStyle = cva(\r\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\r\n)\r\n\r\nconst NavigationMenuTrigger = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\r\n    {...props}\r\n  >\r\n    {children}{\" \"}\r\n    <ChevronDown\r\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\r\n      aria-hidden=\"true\"\r\n    />\r\n  </NavigationMenuPrimitive.Trigger>\r\n))\r\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\r\n\r\nconst NavigationMenuContent = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Content\r\n    ref={ref}\r\n    className={cn(\r\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\r\n\r\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\r\n\r\nconst NavigationMenuViewport = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\r\n>(({ className, ...props }, ref) => (\r\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\r\n    <NavigationMenuPrimitive.Viewport\r\n      className={cn(\r\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nNavigationMenuViewport.displayName =\r\n  NavigationMenuPrimitive.Viewport.displayName\r\n\r\nconst NavigationMenuIndicator = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Indicator\r\n    ref={ref}\r\n    className={cn(\r\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\r\n  </NavigationMenuPrimitive.Indicator>\r\n))\r\nNavigationMenuIndicator.displayName =\r\n  NavigationMenuPrimitive.Indicator.displayName\r\n\r\nexport {\r\n  navigationMenuTriggerStyle,\r\n  NavigationMenu,\r\n  NavigationMenuList,\r\n  NavigationMenuItem,\r\n  NavigationMenuContent,\r\n  NavigationMenuTrigger,\r\n  NavigationMenuLink,\r\n  NavigationMenuIndicator,\r\n  NavigationMenuViewport,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { VariantProps, cva } from \"class-variance-authority\"\r\nimport { PanelLeft } from \"lucide-react\"\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Separator } from \"@/components/ui/separator\"\r\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\r\nimport { Skeleton } from \"@/components/ui/skeleton\"\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\"\r\n\r\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\r\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\r\nconst SIDEBAR_WIDTH = \"16rem\"\r\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\r\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\r\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\r\n\r\ntype SidebarContext = {\r\n  state: \"expanded\" | \"collapsed\"\r\n  open: boolean\r\n  setOpen: (open: boolean) => void\r\n  openMobile: boolean\r\n  setOpenMobile: (open: boolean) => void\r\n  isMobile: boolean\r\n  toggleSidebar: () => void\r\n}\r\n\r\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\r\n\r\nfunction useSidebar() {\r\n  const context = React.useContext(SidebarContext)\r\n  if (!context) {\r\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nconst SidebarProvider = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    defaultOpen?: boolean\r\n    open?: boolean\r\n    onOpenChange?: (open: boolean) => void\r\n  }\r\n>(\r\n  (\r\n    {\r\n      defaultOpen = true,\r\n      open: openProp,\r\n      onOpenChange: setOpenProp,\r\n      className,\r\n      style,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const isMobile = useIsMobile()\r\n    const [openMobile, setOpenMobile] = React.useState(false)\r\n\r\n    // This is the internal state of the sidebar.\r\n    // We use openProp and setOpenProp for control from outside the component.\r\n    const [_open, _setOpen] = React.useState(defaultOpen)\r\n    const open = openProp ?? _open\r\n    const setOpen = React.useCallback(\r\n      (value: boolean | ((value: boolean) => boolean)) => {\r\n        const openState = typeof value === \"function\" ? value(open) : value\r\n        if (setOpenProp) {\r\n          setOpenProp(openState)\r\n        } else {\r\n          _setOpen(openState)\r\n        }\r\n\r\n        // This sets the cookie to keep the sidebar state.\r\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\r\n      },\r\n      [setOpenProp, open]\r\n    )\r\n\r\n    // Helper to toggle the sidebar.\r\n    const toggleSidebar = React.useCallback(() => {\r\n      return isMobile\r\n        ? setOpenMobile((open) => !open)\r\n        : setOpen((open) => !open)\r\n    }, [isMobile, setOpen, setOpenMobile])\r\n\r\n    // Adds a keyboard shortcut to toggle the sidebar.\r\n    React.useEffect(() => {\r\n      const handleKeyDown = (event: KeyboardEvent) => {\r\n        if (\r\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\r\n          (event.metaKey || event.ctrlKey)\r\n        ) {\r\n          event.preventDefault()\r\n          toggleSidebar()\r\n        }\r\n      }\r\n\r\n      window.addEventListener(\"keydown\", handleKeyDown)\r\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\r\n    }, [toggleSidebar])\r\n\r\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\r\n    // This makes it easier to style the sidebar with Tailwind classes.\r\n    const state = open ? \"expanded\" : \"collapsed\"\r\n\r\n    const contextValue = React.useMemo<SidebarContext>(\r\n      () => ({\r\n        state,\r\n        open,\r\n        setOpen,\r\n        isMobile,\r\n        openMobile,\r\n        setOpenMobile,\r\n        toggleSidebar,\r\n      }),\r\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\r\n    )\r\n\r\n    return (\r\n      <SidebarContext.Provider value={contextValue}>\r\n        <TooltipProvider delayDuration={0}>\r\n          <div\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH,\r\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\r\n                ...style,\r\n              } as React.CSSProperties\r\n            }\r\n            className={cn(\r\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\r\n              className\r\n            )}\r\n            ref={ref}\r\n            {...props}\r\n          >\r\n            {children}\r\n          </div>\r\n        </TooltipProvider>\r\n      </SidebarContext.Provider>\r\n    )\r\n  }\r\n)\r\nSidebarProvider.displayName = \"SidebarProvider\"\r\n\r\nconst Sidebar = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    side?: \"left\" | \"right\"\r\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\r\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\r\n  }\r\n>(\r\n  (\r\n    {\r\n      side = \"left\",\r\n      variant = \"sidebar\",\r\n      collapsible = \"offcanvas\",\r\n      className,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\r\n\r\n    if (collapsible === \"none\") {\r\n      return (\r\n        <div\r\n          className={cn(\r\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\r\n            className\r\n          )}\r\n          ref={ref}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (isMobile) {\r\n      return (\r\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\r\n          <SheetContent\r\n            data-sidebar=\"sidebar\"\r\n            data-mobile=\"true\"\r\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\r\n              } as React.CSSProperties\r\n            }\r\n            side={side}\r\n          >\r\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\r\n          </SheetContent>\r\n        </Sheet>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className=\"group peer hidden md:block text-sidebar-foreground\"\r\n        data-state={state}\r\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\r\n        data-variant={variant}\r\n        data-side={side}\r\n      >\r\n        {/* This is what handles the sidebar gap on desktop */}\r\n        <div\r\n          className={cn(\r\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\r\n            \"group-data-[collapsible=offcanvas]:w-0\",\r\n            \"group-data-[side=right]:rotate-180\",\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\r\n          )}\r\n        />\r\n        <div\r\n          className={cn(\r\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\r\n            side === \"left\"\r\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\r\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\r\n            // Adjust the padding for floating and inset variants.\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\r\n            className\r\n          )}\r\n          {...props}\r\n        >\r\n          <div\r\n            data-sidebar=\"sidebar\"\r\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\nSidebar.displayName = \"Sidebar\"\r\n\r\nconst SidebarTrigger = React.forwardRef<\r\n  React.ElementRef<typeof Button>,\r\n  React.ComponentProps<typeof Button>\r\n>(({ className, onClick, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <Button\r\n      ref={ref}\r\n      data-sidebar=\"trigger\"\r\n      variant=\"ghost\"\r\n      size=\"icon\"\r\n      className={cn(\"h-7 w-7\", className)}\r\n      onClick={(event) => {\r\n        onClick?.(event)\r\n        toggleSidebar()\r\n      }}\r\n      {...props}\r\n    >\r\n      <PanelLeft />\r\n      <span className=\"sr-only\">Toggle Sidebar</span>\r\n    </Button>\r\n  )\r\n})\r\nSidebarTrigger.displayName = \"SidebarTrigger\"\r\n\r\nconst SidebarRail = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\">\r\n>(({ className, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <button\r\n      ref={ref}\r\n      data-sidebar=\"rail\"\r\n      aria-label=\"Toggle Sidebar\"\r\n      tabIndex={-1}\r\n      onClick={toggleSidebar}\r\n      title=\"Toggle Sidebar\"\r\n      className={cn(\r\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\r\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\r\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\r\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\r\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\r\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarRail.displayName = \"SidebarRail\"\r\n\r\nconst SidebarInset = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"main\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <main\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\r\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInset.displayName = \"SidebarInset\"\r\n\r\nconst SidebarInput = React.forwardRef<\r\n  React.ElementRef<typeof Input>,\r\n  React.ComponentProps<typeof Input>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Input\r\n      ref={ref}\r\n      data-sidebar=\"input\"\r\n      className={cn(\r\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInput.displayName = \"SidebarInput\"\r\n\r\nconst SidebarHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"header\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarHeader.displayName = \"SidebarHeader\"\r\n\r\nconst SidebarFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"footer\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarFooter.displayName = \"SidebarFooter\"\r\n\r\nconst SidebarSeparator = React.forwardRef<\r\n  React.ElementRef<typeof Separator>,\r\n  React.ComponentProps<typeof Separator>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Separator\r\n      ref={ref}\r\n      data-sidebar=\"separator\"\r\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarSeparator.displayName = \"SidebarSeparator\"\r\n\r\nconst SidebarContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"content\"\r\n      className={cn(\r\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarContent.displayName = \"SidebarContent\"\r\n\r\nconst SidebarGroup = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"group\"\r\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroup.displayName = \"SidebarGroup\"\r\n\r\nconst SidebarGroupLabel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"div\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-label\"\r\n      className={cn(\r\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\r\n\r\nconst SidebarGroupAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-action\"\r\n      className={cn(\r\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\r\n\r\nconst SidebarGroupContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"group-content\"\r\n    className={cn(\"w-full text-sm\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\r\n\r\nconst SidebarMenu = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu\"\r\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenu.displayName = \"SidebarMenu\"\r\n\r\nconst SidebarMenuItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ className, ...props }, ref) => (\r\n  <li\r\n    ref={ref}\r\n    data-sidebar=\"menu-item\"\r\n    className={cn(\"group/menu-item relative\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\r\n\r\nconst sidebarMenuButtonVariants = cva(\r\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\r\n        outline:\r\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\r\n      },\r\n      size: {\r\n        default: \"h-8 text-sm\",\r\n        sm: \"h-7 text-xs\",\r\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst SidebarMenuButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    isActive?: boolean\r\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\r\n  } & VariantProps<typeof sidebarMenuButtonVariants>\r\n>(\r\n  (\r\n    {\r\n      asChild = false,\r\n      isActive = false,\r\n      variant = \"default\",\r\n      size = \"default\",\r\n      tooltip,\r\n      className,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    const { isMobile, state } = useSidebar()\r\n\r\n    const button = (\r\n      <Comp\r\n        ref={ref}\r\n        data-sidebar=\"menu-button\"\r\n        data-size={size}\r\n        data-active={isActive}\r\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\r\n        {...props}\r\n      />\r\n    )\r\n\r\n    if (!tooltip) {\r\n      return button\r\n    }\r\n\r\n    if (typeof tooltip === \"string\") {\r\n      tooltip = {\r\n        children: tooltip,\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\r\n        <TooltipContent\r\n          side=\"right\"\r\n          align=\"center\"\r\n          hidden={state !== \"collapsed\" || isMobile}\r\n          {...tooltip}\r\n        />\r\n      </Tooltip>\r\n    )\r\n  }\r\n)\r\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\r\n\r\nconst SidebarMenuAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    showOnHover?: boolean\r\n  }\r\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-action\"\r\n      className={cn(\r\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"peer-data-[size=sm]/menu-button:top-1\",\r\n        \"peer-data-[size=default]/menu-button:top-1.5\",\r\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        showOnHover &&\r\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\r\n\r\nconst SidebarMenuBadge = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"menu-badge\"\r\n    className={cn(\r\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\r\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\r\n      \"peer-data-[size=sm]/menu-button:top-1\",\r\n      \"peer-data-[size=default]/menu-button:top-1.5\",\r\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\r\n\r\nconst SidebarMenuSkeleton = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    showIcon?: boolean\r\n  }\r\n>(({ className, showIcon = false, ...props }, ref) => {\r\n  // Random width between 50 to 90%.\r\n  const width = React.useMemo(() => {\r\n    return `${Math.floor(Math.random() * 40) + 50}%`\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-skeleton\"\r\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\r\n      {...props}\r\n    >\r\n      {showIcon && (\r\n        <Skeleton\r\n          className=\"size-4 rounded-md\"\r\n          data-sidebar=\"menu-skeleton-icon\"\r\n        />\r\n      )}\r\n      <Skeleton\r\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\r\n        data-sidebar=\"menu-skeleton-text\"\r\n        style={\r\n          {\r\n            \"--skeleton-width\": width,\r\n          } as React.CSSProperties\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n})\r\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\r\n\r\nconst SidebarMenuSub = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu-sub\"\r\n    className={cn(\r\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\r\n\r\nconst SidebarMenuSubItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\r\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\r\n\r\nconst SidebarMenuSubButton = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.ComponentProps<\"a\"> & {\r\n    asChild?: boolean\r\n    size?: \"sm\" | \"md\"\r\n    isActive?: boolean\r\n  }\r\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"a\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub-button\"\r\n      data-size={size}\r\n      data-active={isActive}\r\n      className={cn(\r\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\r\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\r\n        size === \"sm\" && \"text-xs\",\r\n        size === \"md\" && \"text-sm\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\r\n\r\nexport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarGroup,\r\n  SidebarGroupAction,\r\n  SidebarGroupContent,\r\n  SidebarGroupLabel,\r\n  SidebarHeader,\r\n  SidebarInput,\r\n  SidebarInset,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuBadge,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSkeleton,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  SidebarProvider,\r\n  SidebarRail,\r\n  SidebarSeparator,\r\n  SidebarTrigger,\r\n  useSidebar,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\"\r\nimport { Toaster as Sonner, toast } from \"sonner\"\r\n\r\ntype ToasterProps = React.ComponentProps<typeof Sonner>\r\n\r\nconst Toaster = ({ ...props }: ToasterProps) => {\r\n  const { theme = \"system\" } = useTheme()\r\n\r\n  return (\r\n    <Sonner\r\n      theme={theme as ToasterProps[\"theme\"]}\r\n      className=\"toaster group\"\r\n      toastOptions={{\r\n        classNames: {\r\n          toast:\r\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\r\n          description: \"group-[.toast]:text-muted-foreground\",\r\n          actionButton:\r\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\r\n          cancelButton:\r\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\r\n        },\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Toaster, toast }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[77,164],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface TextareaProps\r\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\r\n\r\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <textarea\r\n        className={cn(\r\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nTextarea.displayName = \"Textarea\"\r\n\r\nexport { Textarea }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst toggleVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-transparent\",\r\n        outline:\r\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-3\",\r\n        sm: \"h-9 px-2.5\",\r\n        lg: \"h-11 px-5\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Toggle = React.forwardRef<\r\n  React.ElementRef<typeof TogglePrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\r\n    VariantProps<typeof toggleVariants>\r\n>(({ className, variant, size, ...props }, ref) => (\r\n  <TogglePrimitive.Root\r\n    ref={ref}\r\n    className={cn(toggleVariants({ variant, size, className }))}\r\n    {...props}\r\n  />\r\n))\r\n\r\nToggle.displayName = TogglePrimitive.Root.displayName\r\n\r\nexport { Toggle, toggleVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\components\\ui\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\contexts\\AccessibilityContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":22,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":22,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nexport interface AccessibilitySettings {\r\n  fontSize: 'normal' | 'large' | 'extra-large';\r\n  contrast: 'normal' | 'high';\r\n  voiceEnabled: boolean;\r\n  hapticEnabled: boolean;\r\n  reducedMotion: boolean;\r\n  screenReader: boolean;\r\n}\r\n\r\ninterface AccessibilityContextType {\r\n  settings: AccessibilitySettings;\r\n  updateSettings: (newSettings: Partial<AccessibilitySettings>) => void;\r\n  speak: (text: string) => void;\r\n  vibrate: (pattern?: number | number[]) => void;\r\n}\r\n\r\nconst AccessibilityContext = createContext<AccessibilityContextType | undefined>(undefined);\r\n\r\nexport const useAccessibility = () => {\r\n  const context = useContext(AccessibilityContext);\r\n  if (!context) {\r\n    throw new Error('useAccessibility must be used within AccessibilityProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AccessibilityProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [settings, setSettings] = useState<AccessibilitySettings>({\r\n    fontSize: 'normal',\r\n    contrast: 'normal',\r\n    voiceEnabled: false,\r\n    hapticEnabled: true,\r\n    reducedMotion: false,\r\n    screenReader: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Load saved settings\r\n    const savedSettings = localStorage.getItem('accessibilitySettings');\r\n    if (savedSettings) {\r\n      setSettings(JSON.parse(savedSettings));\r\n    }\r\n\r\n    // Check for system preferences\r\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\r\n    if (prefersReducedMotion) {\r\n      setSettings(prev => ({ ...prev, reducedMotion: true }));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Apply settings to document\r\n    const root = document.documentElement;\r\n    \r\n    // Font size\r\n    switch (settings.fontSize) {\r\n      case 'large':\r\n        root.style.fontSize = '18px';\r\n        break;\r\n      case 'extra-large':\r\n        root.style.fontSize = '24px';\r\n        break;\r\n      default:\r\n        root.style.fontSize = '16px';\r\n    }\r\n\r\n    // Contrast\r\n    if (settings.contrast === 'high') {\r\n      root.classList.add('high-contrast');\r\n    } else {\r\n      root.classList.remove('high-contrast');\r\n    }\r\n\r\n    // Reduced motion\r\n    if (settings.reducedMotion) {\r\n      root.classList.add('reduced-motion');\r\n    } else {\r\n      root.classList.remove('reduced-motion');\r\n    }\r\n\r\n    // Save settings\r\n    localStorage.setItem('accessibilitySettings', JSON.stringify(settings));\r\n  }, [settings]);\r\n\r\n  const updateSettings = (newSettings: Partial<AccessibilitySettings>) => {\r\n    setSettings(prev => ({ ...prev, ...newSettings }));\r\n  };\r\n\r\n  const speak = (text: string) => {\r\n    if (settings.voiceEnabled && 'speechSynthesis' in window) {\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.lang = 'pt-BR';\r\n      utterance.rate = 0.8;\r\n      speechSynthesis.speak(utterance);\r\n    }\r\n  };\r\n\r\n  const vibrate = (pattern: number | number[] = 200) => {\r\n    if (settings.hapticEnabled && 'vibrate' in navigator) {\r\n      navigator.vibrate(pattern);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AccessibilityContext.Provider value={{ settings, updateSettings, speak, vibrate }}>\r\n      {children}\r\n    </AccessibilityContext.Provider>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\contexts\\UserContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":37,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":37,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\nexport interface AccessibilityProfile {\r\n  visualImpairment: boolean;\r\n  hearingImpairment: boolean;\r\n  mobilityImpairment: boolean;\r\n  cognitiveImpairment: boolean;\r\n  preferredInterface: 'voice' | 'visual' | 'simplified';\r\n}\r\n\r\nexport interface Contact {\r\n  id: string;\r\n  name: string;\r\n  phone: string;\r\n  relationship: string;\r\n}\r\n\r\nexport interface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  userType: 'passenger' | 'driver';\r\n  accessibilityNeeds: AccessibilityProfile;\r\n  emergencyContacts: Contact[];\r\n}\r\n\r\ninterface UserContextType {\r\n  user: User | null;\r\n  setUser: (user: User | null) => void;\r\n  updateUser: (updates: Partial<User>) => void;\r\n}\r\n\r\nconst UserContext = createContext<UserContextType | undefined>(undefined);\r\n\r\nexport const useUser = () => {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error('useUser must be used within UserProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const UserProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n\r\n  const updateUser = (updates: Partial<User>) => {\r\n    if (user) {\r\n      const updatedUser = { ...user, ...updates };\r\n      setUser(updatedUser);\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, setUser, updateUser }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\pages\\Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\menez\\Documents\\acessivel-mobility\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]